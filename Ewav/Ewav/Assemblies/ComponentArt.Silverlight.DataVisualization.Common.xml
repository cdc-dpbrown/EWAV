<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ComponentArt.Silverlight.DataVisualization.Common</name>
    </assembly>
    <members>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.IAnimationProvider">
            <summary>
            Defines properties and methods for class that supports animations.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.IAnimationProvider.Animate(System.TimeSpan)">
            <summary>
            Animates the ActualAnimator for the specified duration.
            </summary>
            <param name="duration">The duration for which the Animator should animate.</param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.IAnimationProvider.Animator">
            <summary>
            Gets or sets an Animator object.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.IAnimationProvider.ActualAnimator">
            <summary>
            Gets the actual animator object.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.IAnimationProvider.EnableAnimation">
            <summary>
            Gets or sets whether animation is enabled.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.Animator">
            <summary>
            Base class for animation objects.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Animator.#ctor">
            <summary>
            Initializes a new instance of the Animator class. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Animator.Animate(ComponentArt.Silverlight.DataVisualization.Utils.Animator,System.TimeSpan)">
            <summary>
            Animates an Animator object for the specified duration.
            </summary>
            <param name="animator">The Animator to animate.</param>
            <param name="duration">The duration for which the Animator should be animated.</param>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Utils.Animator.sb">
            <summary>
            The Storyboard object associated with the Animator.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Utils.Animator.storyboardCompletedHandler">
            <summary>
            Fires when the associated Storyboard has completed.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Animator.GetStoryboard(System.Double)">
            <summary>
            Returns a Storyboard object that represents this animation.
            </summary>
            <param name="allowedTimeMs">The desired time for the animation will run.</param>
            <returns>A Storyboard object that represents this animation.</returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Animator.SetStatus(ComponentArt.Silverlight.DataVisualization.Utils.Animator.AnimationStatus)">
            <summary>
            Do not call directly, only to be called within the animation framework. Setting the animator status at the beginning and at the end of animation.
            </summary>
            <param name="status">Indicates whether the status is to be set at the beginning or at the end of the animation.</param>
            <remarks>
            This method must be implemented in derived classes. It is supposed to be used only from the animation framework.
            </remarks>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Animator.Animate(System.TimeSpan)">
            <summary>
            Animates the Animator for the specified duration.
            </summary>
            <param name="duration">The duration, in milliseconds, that the Animator should animate.</param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Animator.StoryboardCompleted(System.Object,System.EventArgs)">
            <summary>
            Called automatically when the Animator's Storyboard has completed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Utils.Animator.Completed">
            <summary>
            Occurs when an animation has completed.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.Animator.Duration">
            <summary>
            Gets or sets duration of the animation in miliseconds.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.Animator.BeginTime">
            <summary>
            Gets or sets start time (or delay) in miliseconds of the animation from when Animate() is called.
            </summary>
            <remarks>
            This can be modified in the storyboard creation process, when durations and start times can be adjusted to the containing 
            composite animation timings.
            </remarks>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.Animator.TargetObject">
            <summary>
            Gets or sets the object that is to be animated.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.Animator.EasingFunction">
            <summary>
            Gets or sets the easing function for the animation.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.Animator.AutoReverse">
            <summary>
            Gets or sets whether the animation auto-reverses on completion.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.Animator.DesiredDuration">
            <summary>
            Working duration in miliseconds. Use this value in derived classes only.
            </summary>
            <remarks>
            This value is derived from the original duration value in the process of storyboard creation and it may be scaled 
            in the storyboard creation process, when durations and start times can be adjusted to the containing 
            composite animation timings.
            </remarks>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.EmptyAnimator">
            <summary>
            Provides an empty Animator object.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.EmptyAnimator.#ctor">
            <summary>
            Initializes a new instance of the EmptyAnimator class.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.EmptyAnimator.GetStoryboard(System.Double)">
            <summary>
            Returns a Storyboard object that represents this animation.
            </summary>
            <param name="allowedTimeMs">The desired time for the animation will run.</param>
            <returns>A Storyboard object that represents this animation.</returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.EmptyAnimator.SetStatus(ComponentArt.Silverlight.DataVisualization.Utils.Animator.AnimationStatus)">
            <summary>
            Do not call directly, only to be called within the animation framework. Setting the animator status at the beginning and at the end of animation.
            </summary>
            <param name="status">Indicates whether the status is to be set at the beginning or at the end of the animation.</param>
            <remarks>
            This method must be implemented in derived classes. It is supposed to be used only from the animation framework.
            </remarks>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.CompositeAnimator">
            <summary>
            Provides an Animator object composed of one or more other Animators.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Utils.CompositeAnimator.subAnimators">
            <summary>
            The collection of child Animators.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Utils.CompositeAnimator.subAnimatorCompletedHandler">
            <summary>
            First when a child Animator completes its animation.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.CompositeAnimator.#ctor">
            <summary>
            Initializes a new instance of the CompositeAnimator class.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.CompositeAnimator.#ctor(ComponentArt.Silverlight.DataVisualization.Utils.Animator[])">
            <summary>
            Initializes a new instance of the CompositeAnimator class and adds the specified list of sub-animators.
            </summary>
            <param name="animators">The list of sub-animators.</param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.CompositeAnimator.Clear">
            <summary>
            Removes all child Animators from the CompositeAnimator.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.CompositeAnimator.Add(ComponentArt.Silverlight.DataVisualization.Utils.Animator,System.Double)">
            <summary>
            Adds an Animator to the CompositeAnimator with the specified start time.
            </summary>
            <param name="animator">The Animator to add.</param>
            <param name="beginTimeMs">The time, in milliseconds, at which the animation will begin.</param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.CompositeAnimator.AppendWithDelay(ComponentArt.Silverlight.DataVisualization.Utils.Animator,System.Double)">
            <summary>
            Appends an Animator to the CompositeAnimator with the specified delay.
            </summary>
            <param name="animator">The Animator to append.</param>
            <param name="delayMs">The time, in milliseconds, at which the animation will begin relative to the Animator at the previous index.</param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.CompositeAnimator.Add(ComponentArt.Silverlight.DataVisualization.Utils.Animator)">
            <summary>
            Adds an Animator to the CompositeAnimator.
            </summary>
            <param name="animator">The Animator to add.</param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.CompositeAnimator.SetMembersOverlap(System.Double)">
            <summary>
            Arrange members start and duration so that they animate with some overlap.
            </summary>
            <param name="overlap">The overlap amount, between 0 and 1.</param>
            <remarks>
            With overlap = 0, members are animated sequentially. With overlap = 1 elements are animated simultaneously. 
            </remarks>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.CompositeAnimator.GetStoryboard(System.Double)">
            <summary>
            Returns a Storyboard object that represents this animation.
            </summary>
            <param name="allowedTimeMs">The desired time for the animation will run.</param>
            <returns>A Storyboard object that represents this animation.</returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.CompositeAnimator.SetStatus(ComponentArt.Silverlight.DataVisualization.Utils.Animator.AnimationStatus)">
            <summary>
            Do not call directly, only to be called within the animation framework. Setting the animator status at the beginning and at the end of animation.
            </summary>
            <param name="status">Indicates whether the status is to be set at the beginning or at the end of the animation.</param>
            <remarks>
            This method must be implemented in derived classes. It is supposed to be used only from the animation framework.
            </remarks>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.CompositeAnimator.Item(System.Int32)">
            <summary>
            Gets the Animator at the specified index.
            </summary>
            <param name="index">The zero-based index of the Animator to get.</param>
            <returns>The Animator at the specified index.</returns>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.CompositeAnimator.Count">
            <summary>
            Gets the number of child Animators contained in the CompositeAnimator.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.PropertyAnimator">
            <summary>
            Provides a base class for animating object properties.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.PropertyAnimator.#ctor">
            <summary>
            Initializes a new instance of the PropertyAnimator class.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.PropertyAnimator.GetTimeline">
            <summary>
            Returns a Timeline object that represents this Animator.
            </summary>
            <returns>A Timeline object that represents this Animator.</returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.PropertyAnimator.GetStoryboard(System.Double)">
            <summary>
            Returns a Storyboard object that represents this Animator.
            </summary>
            <param name="allowedTimeMs">The desired time for the animation will run.</param>
            <returns>A Storyboard object that represents this Animator.</returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.PropertyAnimator.SetStatus(ComponentArt.Silverlight.DataVisualization.Utils.Animator.AnimationStatus)">
            <summary>
            Do not call directly, only to be called within the animation framework. Setting the animator status at the beginning and at the end of animation.
            </summary>
            <param name="status">Indicates whether the status is to be set at the beginning or at the end of the animation.</param>
            <remarks>
            This method must be implemented in derived classes. It is supposed to be used only from the animation framework.
            </remarks>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.PropertyAnimator.TargetProperty">
            <summary>
            Gets or sets the target property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.PropertyAnimator.TargetIsSet">
            <summary>
            Gets or sets whether the target is set.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.PropertyAnimator.From">
            <summary>
            Gets or sets the value to animate from.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.PropertyAnimator.To">
            <summary>
            Gets or sets the value to animate to.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.PropertyAnimator.By">
            <summary>
            Gets or sets the step to animate by.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.PropertyAnimator.Property">
            <summary>
            Gets a PropertyInfo object that represents the target property.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.DoubleAnimator">
            <summary>
            Provides a PropertyAnimator for properties of type Double.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.DoubleAnimator.#ctor">
            <summary>
            Initializes a new instance of the DoubleAnimator class.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.DoubleAnimator.GetTimeline">
            <summary>
            Returns a Timeline object that represents this Animator.
            </summary>
            <returns>A Timeline object that represents this Animator.</returns>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.ColorAnimator">
            <summary>
            Provides a PropertyAnimator for properties of type Color.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.ColorAnimator.#ctor">
            <summary>
            Initializes a new instance of the ColorAnimator class.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.ColorAnimator.GetTimeline">
            <summary>
            Returns a Timeline object that represents this Animator.
            </summary>
            <returns>A Timeline object that represents this Animator.</returns>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.PointAnimator">
            <summary>
            Provides a PropertyAnimator for properties of type Point.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.PointAnimator.#ctor">
            <summary>
            Initializes a new instance of the PointAnimator class.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.PointAnimator.GetTimeline">
            <summary>
            Returns a Timeline object that represents this Animator.
            </summary>
            <returns>A Timeline object that represents this Animator.</returns>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.BrushAnimator">
            <summary>
            Provides a PropertyAnimator for properties of type Brush.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.BrushAnimator.#ctor">
            <summary>
            Initializes a new instance of the BrushAnimator class.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.BrushAnimator.GetTimeline">
            <summary>
            Returns a Timeline object that represents this Animator.
            </summary>
            <returns>A Timeline object that represents this Animator.</returns>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Utils.BrushAnimator.ColorProperty">
            <summary>
            Identifies the Color dependency property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.BrushAnimator.Color">
            <summary>
            Gets or sets the color of the Brush.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.ProgressAnimator">
            <summary>
            Provides a base Animator for monitoring the progress of an animation.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.ProgressAnimator.#ctor">
            <summary>
            Initializes a new instance of the ProgressAnimator class.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.ProgressAnimator.GetStoryboard(System.Double)">
            <summary>
            Returns a Storyboard object that represents this animation.
            </summary>
            <param name="allowedTimeMs">The desired time for the animation will run.</param>
            <returns>A Storyboard object that represents this animation.</returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.ProgressAnimator.HandleProgress(System.Double)">
            <summary>
            Part of the animation framework. For internal use only.  
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.ProgressAnimator.SetStatus(ComponentArt.Silverlight.DataVisualization.Utils.Animator.AnimationStatus)">
            <summary>
            Do not call directly, only to be called within the animation framework. Setting the animator status at the beginning and at the end of animation.
            </summary>
            <param name="status">Indicates whether the status is to be set at the beginning or at the end of the animation.</param>
            <remarks>
            This method must be implemented in derived classes. It is supposed to be used only from the animation framework.
            </remarks>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Utils.ProgressAnimator.ProgressProperty">
            <summary>
            Identifies the Progress dependency property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.ProgressAnimator.From">
            <summary>
            Gets or sets the value to animate from.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.ProgressAnimator.To">
            <summary>
            Gets or sets the value to animate to.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.ProgressAnimator.By">
            <summary>
            Gets or sets the step to animate by.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.ProgressAnimator.Progress">
            <summary>
            Gets or sets the current progress value.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.ClipAnimator">
            <summary>
            Provides a ProgressAnimator for Clip animation.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.ClipAnimator.#ctor">
            <summary>
            Initializes a new instance of the ClipAnimator class.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.ClipAnimator.HandleProgress(System.Double)">
            <summary>
            Part of the animation framework. For internal use only.  
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.ClipAnimator.ClipKind">
            <summary>
            Gets or sets a ClipKind enumeration value that specifies how the Clip will be animated.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.ClipAnimator.Size">
            <summary>
            Gets or sets the Size of the Clip.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.ClipAnimator.Center">
            <summary>
            Gets or sets the center-point of the Clip.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.ClipAnimator.Kind">
            <summary>
            Specifies the method used for animating a Clip object.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Utils.ClipAnimator.Kind.HorizontalGrow">
            <summary>
            Animation grows horizontally (left-to-right).
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Utils.ClipAnimator.Kind.HorizontalGrowBackwards">
            <summary>
            Animation grows horizontally from right-to-left.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Utils.ClipAnimator.Kind.HorizontalGrowFromCentre">
            <summary>
            Animation grows horizontally from center outwards.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Utils.ClipAnimator.Kind.VerticalGrow">
            <summary>
            Animation grows vertically (bottom-to-top).
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Utils.ClipAnimator.Kind.VerticalGrowDownwards">
            <summary>
            Animation grows vertically from top-to-bottom.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Utils.ClipAnimator.Kind.VerticalGrowFromCentre">
            <summary>
            Animation grows vertically from center outwards.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Utils.ClipAnimator.Kind.RadialGrow">
            <summary>
            Animation grows from center outwards.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Utils.ClipAnimator.Kind.EllipticGrow">
            <summary>
            Animation grows from center outwards (elliptic).
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.RadialSwipeAnimator">
            <summary>
            Provides a ProgressAnimator for radial swipe animation.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.RadialSwipeAnimator.#ctor">
            <summary>
            Initializes a new instance of the RadialSwipeAnimator class.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.RadialSwipeAnimator.SetStatus(ComponentArt.Silverlight.DataVisualization.Utils.Animator.AnimationStatus)">
            <summary>
            Do not call directly, only to be called within the animation framework. Setting the animator status at the beginning and at the end of animation.
            </summary>
            <param name="status">Indicates whether the status is to be set at the beginning or at the end of the animation.</param>
            <remarks>
            This method must be implemented in derived classes. It is supposed to be used only from the animation framework.
            </remarks>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.RadialSwipeAnimator.HandleProgress(System.Double)">
            <summary>
            Part of the animation framework. For internal use only.  
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.RadialSwipeAnimator.StartingAngle">
            <summary>
            Gets or sets the starting angle in degrees.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.RadialSwipeAnimator.EndingAngle">
            <summary>
            Gets or sets the ending angle in degrees.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.RadialSwipeAnimator.Center">
            <summary>
            Center of the radial swipe.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.RadialSwipeAnimator.Radius">
            <summary>
            Radius of the radial swipe.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.StretchAnimator">
            <summary>
            Provides a ProgressAnimator for a Transform animation.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.StretchAnimator.#ctor">
            <summary>
            Initializes a new instance of the StretchAnimator class.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.StretchAnimator.SetStatus(ComponentArt.Silverlight.DataVisualization.Utils.Animator.AnimationStatus)">
            <summary>
            Do not call directly, only to be called within the animation framework. Setting the animator status at the beginning and at the end of animation.
            </summary>
            <param name="status">Indicates whether the status is to be set at the beginning or at the end of the animation.</param>
            <remarks>
            This method must be implemented in derived classes. It is supposed to be used only from the animation framework.
            </remarks>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.StretchAnimator.HandleProgress(System.Double)">
            <summary>
            Part of the animation framework. For internal use only.  
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.StretchAnimator.OrigRect">
            <summary>
            Gets or sets the original Rect of the target object.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.StretchAnimator.FromRect">
            <summary>
            Gets or sets the Rect to animate from.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.StretchAnimator.ToRect">
            <summary>
            Gets or sets the Rect to animate to.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.StretchAnimator.StretchKind">
            <summary>
            Gets or sets a StretchKind enumeration value that specifies how the
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.StretchAnimator.Kind">
            <summary>
            Specifies the method used for animating using a Transform.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Utils.StretchAnimator.Kind.HorizontalGrow">
            <summary>
            Grows the animation horizontally (left-to-right).
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Utils.StretchAnimator.Kind.HorizontalGrowBackwards">
            <summary>
            Grows the animation horizontally from right-to-left.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Utils.StretchAnimator.Kind.HorizontalGrowFromCentre">
            <summary>
            Grows the animation horizontally from the center outwards.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Utils.StretchAnimator.Kind.VerticalGrow">
            <summary>
            Grows the animation vertically (bottom-to-top).
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Utils.StretchAnimator.Kind.VerticalGrowDownwards">
            <summary>
            Grows the animation vertically from top-to-bottom.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Utils.StretchAnimator.Kind.VerticalGrowFromCentre">
            <summary>
            Grows the animation vertically from the center outwards.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Utils.StretchAnimator.Kind.ScalingGrow">
            <summary>
            Grows the animation from the center outwards.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.BouncingAnimator">
            <summary>
            Provides a ProgressAnimator for animating with a bounce effect.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.BouncingAnimator.#ctor">
            <summary>
            Initializes a new instance of the BouncingAnimator class.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.BouncingAnimator.SetStatus(ComponentArt.Silverlight.DataVisualization.Utils.Animator.AnimationStatus)">
            <summary>
            Do not call directly, only to be called within the animation framework. Setting the animator status at the beginning and at the end of animation.
            </summary>
            <param name="status">Indicates whether the status is to be set at the beginning or at the end of the animation.</param>
            <remarks>
            This method must be implemented in derived classes. It is supposed to be used only from the animation framework.
            </remarks>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.BouncingAnimator.HandleProgress(System.Double)">
            <summary>
            Part of the animation framework. For internal use only.  
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.BouncingAnimator.StartPoint">
            <summary>
            Gets or sets the Point to animate from.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.BouncingAnimator.EndPoint">
            <summary>
            Gets or sets the Point to animate to.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.DroppingAnimator">
            <summary>
            Provides a ProgressAnimator for animating with a drop effect.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.DroppingAnimator.#ctor">
            <summary>
            Initializes a new instance of the DroppingAnimator class.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.DroppingAnimator.SetStatus(ComponentArt.Silverlight.DataVisualization.Utils.Animator.AnimationStatus)">
            <summary>
            Do not call directly, only to be called within the animation framework. Setting the animator status at the beginning and at the end of animation.
            </summary>
            <param name="status">Indicates whether the status is to be set at the beginning or at the end of the animation.</param>
            <remarks>
            This method must be implemented in derived classes. It is supposed to be used only from the animation framework.
            </remarks>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.DroppingAnimator.HandleProgress(System.Double)">
            <summary>
            Part of the animation framework. For internal use only.  
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.DroppingAnimator.StartPoint">
            <summary>
            Gets or sets the Point to animate from.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.DroppingAnimator.EndPoint">
            <summary>
            Gets or sets the Point to animate to.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.FadeInAnimator">
            <summary>
            Provides a ProgressAnimator for animating with a fade-in effect.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.FadeInAnimator.#ctor">
            <summary>
            Initializes a new instance of the FadeInAnimator class.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.FadeInAnimator.SetStatus(ComponentArt.Silverlight.DataVisualization.Utils.Animator.AnimationStatus)">
            <summary>
            Do not call directly, only to be called within the animation framework. Setting the animator status at the beginning and at the end of animation.
            </summary>
            <param name="status">Indicates whether the status is to be set at the beginning or at the end of the animation.</param>
            <remarks>
            This method must be implemented in derived classes. It is supposed to be used only from the animation framework.
            </remarks>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.FadeInAnimator.HandleProgress(System.Double)">
            <summary>
            Part of the animation framework. For internal use only.  
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.CalcEngine.OpKind">
            <summary>
            <para>For internal use by the DV framework only.  Used for building and evaluating Calc programs. </para>
            To get started learning about Calc and its uses, see the <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/Calc_IntroductionTo.htm">Introduction to Calc</a> tutorial. <br />
            To learn about the Calc syntax and the programming tools available, see the <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/Calc_Syntax_Welcome.htm">Calc Syntax</a> welcome tutorial. 
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.CalcEngine.ASNode">
            <summary>
            <para>For internal use by the DV framework only. Base node class for abstract syntax tree. </para>
            To get started learning about Calc and its uses, see the <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/Calc_IntroductionTo.htm">Introduction to Calc</a> tutorial. <br />
            To learn about the Calc syntax and the programming tools available, see the <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/Calc_Syntax_Welcome.htm">Calc Syntax</a> welcome tutorial. 
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.CalcEngine.ASNodeLeaf">
            <summary>
            <para>For internal use by the DV framework only.  Used for building and evaluating Calc programs. </para>
            To get started learning about Calc and its uses, see the <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/Calc_IntroductionTo.htm">Introduction to Calc</a> tutorial. <br />
            To learn about the Calc syntax and the programming tools available, see the <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/Calc_Syntax_Welcome.htm">Calc Syntax</a> welcome tutorial. 
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.CalcEngine.ASNodeName">
            <summary>
            <para>For internal use by the DV framework only.  Used for building and evaluating Calc programs. </para>
            To get started learning about Calc and its uses, see the <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/Calc_IntroductionTo.htm">Introduction to Calc</a> tutorial. <br />
            To learn about the Calc syntax and the programming tools available, see the <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/Calc_Syntax_Welcome.htm">Calc Syntax</a> welcome tutorial. 
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.CalcContainer">
            <summary>
            Control used to pass the result of a Calc expression to a child control. No visual component.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.CalcContainer.ContextProperty">
            <summary>
            Identifies the Context dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.CalcContainer.ChildProperty">
            <summary>
            Identifies the Child dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.CalcContainer.ComputingProperty">
            <summary>
            Identifies the Computing dependency property.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.CalcContainer.OnApplyTemplate">
            <summary>
            Overrides the base OnApplyTemplate() method.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.CalcContainer.Context">
            <summary>
            Context to be passed to the Calc expression as an input. Defaults to the default available context.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.CalcContainer.Child">
            <summary>
            Element which receives the result of the Calc expression.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.CalcContainer.Computing">
            <summary>
            Calc language script to be evaluated. 
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.CalcEngine.CalcEngine">
            <summary>
            Evaluetes expressions written in ComponentArt CALC on data classes.  
            Has no visual components but allows users to quickly and efficiently perform a numerous logical, statistical and mathematical operations on their data sets.
            </summary>
            <remarks>
            <para>Set the <see cref="P:ComponentArt.Silverlight.DataVisualization.CalcEngine.CalcEngine.Expression"/> property to the <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/Calc_IntroductionTo.htm">Calc</a> expression string.</para>
            <para>Define at least one <see cref="T:ComponentArt.Silverlight.DataVisualization.CalcEngine.CalcEngineInput"/> inside the control.</para>
            To learn more about this control see the list of <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/CalcEngine_Welcome.htm">CalcEngine tutorials</a>.<br/>
            To get started learning about Calc and its uses, see the <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/Calc_IntroductionTo.htm">Introduction to Calc</a>. 
            </remarks>
            <seealso cref="T:ComponentArt.Silverlight.DataVisualization.CalcEngine.CalcEngineInput"/>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.CalcEngine.CalcEngine._DataContextProperty">
            <summary>
            Identifies the _DataContext dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.CalcEngine.CalcEngine.InputsProperty">
            <summary>
            InputsProperty dependency property. 
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.CalcEngine.CalcEngine.OutputProperty">
            <summary>
            OutputProperty dependency property. 
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.CalcEngine.CalcEngine.ExpressionProperty">
            <summary>
            ExpressionProperty dependency property. 
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.CalcEngine.CalcEngine.VariablesProperty">
            <summary>
            Identifies the Variables dependency property.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.CalcEngine.Refresh">
            <summary>
            Force CalcEngine to read its Inputs, evaluate the Expression, and return the result to Output.
            </summary>
            <remarks>
            Optional: If AllowNullableInputs is false CalcEngine will not Refresh if any of the Input values are null.  Default is false.
            </remarks>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.CalcEngine.Refresh(System.Boolean)">
            <summary>
            Force CalcEngine to read its Inputs, evaluate the Expression, and return the result to Output.
            If false is passed (as AllowNullableInputs), CalcEngine will not Refresh if any of the Input values are null.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.CalcEngine.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.CalcEngine.OnApplyTemplate">
            <summary>
            Lifecycle method to be called by the framework.  Do not call directly from external code.
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.CalcEngine.CalcEngine.PropertyChanged">
            <summary>
            Raised when either the Error (PropertyName = "Error") or Output (PropertyName = 
            "Output") properties change.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.CalcEngine.CalcEngine.Inputs">
            <summary>
            Collection of controls or objects that the Expression will evaluate on.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.CalcEngine.CalcEngine.Output">
            <summary>
            Result of the Expression evaluation on the Inputs.  Bindable-controls can be bound to this.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.CalcEngine.CalcEngine.Expression">
            <summary>
            Script to be evaluated, written in ComponentArt's Calc language.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.CalcEngine.CalcEngine.Error">
            <summary>
            Error object.  If null, no exceptions were raised during the last Expression evaluation.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.CalcEngine.CalcEngine.AutoRefresh">
            <summary>
            Whether to automatically evaluate the Expression when it or an Input is changed.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.CalcEngine.CalcEngine.Extensions">
            <summary>
            Comma-delimited list of names of Extension libraries you want the control to use (i.e. "Statistical,Financial").
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.CalcEngine.CalcEngine.Variables">
            <summary>
            A dictionary of Calc variables available in the data context. Keys are variable names.
            </summary>
            <remarks>
            Use this property to bind to the Calc variables using notation 
            <example>{Binding Variables[variableName], ElementName=calcControlName}</example>
            </remarks>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.CalcEngine.CalcEngineInput">
            <summary>
            Defines a reference to a data-set variable that will be used to perform calculations on from the Calc scripts.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.CalcEngine.CalcEngineInput.ValueProperty">
            <summary>
            Value dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.CalcEngine.CalcEngineInput.DesignTimeDataRecordsProperty">
            <summary>
            DesignTimeDataRecordsProperty dependency property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.CalcEngine.CalcEngineInput.Id">
            <summary>
            Indentifier to be used to refer to this CalcEngineInput's Value during Calc expression evaluations.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.CalcEngine.CalcEngineInput.ParentCalcEngine">
            <summary>
            Reference to associated CalcEngine control, which will reference the Input in Expressions.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.CalcEngine.CalcEngineInput.Nullable">
            <summary>
            Whether this CalcEngineInput's Value should ever be null.  Default false.  If false and Value is null and AllowNullableInputs (default false) is false, the Expression evaluation is cancelled.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.CalcEngine.CalcEngineInput.Value">
            <summary>
            Object to be read during Expression evaluations.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.CalcEngine.CalcEngineInput.DesignTimeDataRecords">
            <summary>
            Number of DesignTimeData Records to Generate
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.CalcEngine.CalcEngineInput.ValueChanged">
            <summary>
            Raised when the dependency property detects a change in the object assigned to Value.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.CalcEngine.CustomOperators">
            <summary>
            <para>For internal use by the DV framework only.  Used for building and evaluating Calc programs. Custom operators are referenced by the end user in the Calc language itself.</para>
            To get started learning about Calc and its uses, see the <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/Calc_IntroductionTo.htm">Introduction to Calc</a> tutorial. <br />
            To learn about the Calc syntax and the programming tools available, see the <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/Calc_Syntax_Welcome.htm">Calc Syntax</a> welcome tutorial. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.CustomOperators.Filter(ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionEvaluator,System.Collections.IEnumerable,System.Object)">
            <summary>
            Stripes elements that do not satisfy the given condition.
            </summary>
            <example>
            DataSet1.Filter(Field1 &gt; 10);
            DataSet1.Filter(Field1 + Field2 &lt; 100);
            </example>
            <param name="evaluator"></param>
            <param name="set"></param>
            <param name="scriptObj"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.CustomOperators.All(ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionEvaluator,System.Collections.IEnumerable,System.Object)">
            <summary>
            Determines whether all elements of a sequence satisfy a condition.
            </summary>
            <example>
            DataSet1.All(Field1 > 10);
            </example>
            <param name="evaluator"></param>
            <param name="set1"></param>
            <param name="scriptObj"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.CustomOperators.Any(ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionEvaluator,System.Collections.IEnumerable,System.Object)">
            <summary>
            Determines whether a sequence contains any elements.
            If an condition is supplied, determines whether any element in the sequence satisfies the condition.
            </summary>
            <example>
            DataSet1.Any(Field1.Contains("blue"));
            </example>
            <param name="evaluator"></param>
            <param name="set1"></param>
            <param name="scriptObj"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.CustomOperators.Concat(ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionEvaluator,System.Collections.IEnumerable,System.Object)">
            <summary>
            Concatenates two sequences.
            </summary>
            <example>
            DataSet1.Concat(DataSet2);
            </example>
            <param name="evaluator"></param>
            <param name="set1"></param>
            <param name="scriptObj"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.CustomOperators.ContainsElement(ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionEvaluator,System.Collections.IEnumerable,System.Object)">
            <summary>
            Determines whether a sequence contains a specified element.
            </summary>
            <example>
            DataSet1.ContainsElement(DataSet2.First());
            </example>
            <param name="evaluator"></param>
            <param name="set1"></param>
            <param name="scriptObj"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.CustomOperators.Count(ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionEvaluator,System.Collections.IEnumerable,System.Object)">
            <summary>
            Returns the number of elements in a sequence.
            If a condition is supplied, returns the number of elements in the sequence that satisfy the condition.
            </summary>
            <param name="evaluator"></param>
            <param name="set1"></param>
            <param name="scriptObj"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.CustomOperators.DefaultIfEmpty(ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionEvaluator,System.Collections.IEnumerable,System.Object)">
            <summary>
            Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.
            </summary>
            <example>
            DataSet1.DefaultIfEmpty();
            </example>
            <param name="evaluator"></param>
            <param name="set1"></param>
            <param name="scriptObj"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.CustomOperators.Distinct(ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionEvaluator,System.Collections.IEnumerable,System.Object)">
            <summary>
            Returns distinct elements from a sequence by using the default equality comparer to compare values.
            </summary>
            <example>
            DataSet1.Distinct();
            </example>
            <param name="evaluator"></param>
            <param name="set1"></param>
            <param name="scriptObj"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.CustomOperators.ElementAt(ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionEvaluator,System.Collections.IEnumerable,System.Object)">
            <summary>
            Returns the element at a specified index in a sequence.
            </summary>
            <example>
            DataSet1.ElementAt(12);
            </example>
            <param name="evaluator"></param>
            <param name="set1"></param>
            <param name="scriptObj"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.CustomOperators.ElementAtOrDefault(ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionEvaluator,System.Collections.IEnumerable,System.Object)">
            <summary>
            Returns the element at a specified index in a sequence or a default value if the index is out of range.
            </summary>
            <example>
            DataSet1.ElementAt(121);
            </example>
            <param name="evaluator"></param>
            <param name="set1"></param>
            <param name="scriptObj"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.CustomOperators.Except(ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionEvaluator,System.Collections.IEnumerable,System.Object)">
            <summary>
            Produces the set difference of two sequences by using the default equality comparer to compare values.
            </summary>
            <example>
            DataSet1.Except(DataSet2);
            </example>
            <param name="evaluator"></param>
            <param name="set1"></param>
            <param name="scriptObj"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.CustomOperators.Intersect(ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionEvaluator,System.Collections.IEnumerable,System.Object)">
            <summary>
            Produces the set intersection of two sequences by using the default equality comparer to compare values.
            </summary>
            <example>
            DataSet1.Intersect(DataSet2);
            </example>
            <param name="evaluator"></param>
            <param name="set1"></param>
            <param name="scriptObj"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.CustomOperators.First(ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionEvaluator,System.Collections.IEnumerable,System.Object)">
            <summary>
            Returns the first element of a sequence.
            If a condition is supplied, returns the first element in a sequence that satisfies the specified condition.
            </summary>
            <example>
            DataSet1.First(Field1 &gt; 100);
            </example>
            <param name="evaluator"></param>
            <param name="set1"></param>
            <param name="scriptObj"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.CustomOperators.Last(ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionEvaluator,System.Collections.IEnumerable,System.Object)">
            <summary>
            Returns the last element of a sequence.
            If a condition is supplied, returns the last element of a sequence that satisfies a specified condition.
            </summary>
            <example>
            DataSet1.Last(Field1 &lt; 100);
            </example>
            <param name="evaluator"></param>
            <param name="set1"></param>
            <param name="scriptObj"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.CustomOperators.Reverse(ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionEvaluator,System.Collections.IEnumerable,System.Object)">
            <summary>
            Inverts the order of the elements in a sequence.
            </summary>
            <example>
            DataSet1.Reverse();
            </example>
            <param name="evaluator"></param>
            <param name="set1"></param>
            <param name="scriptObj"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.CustomOperators.SequenceEqual(ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionEvaluator,System.Collections.IEnumerable,System.Object)">
            <summary>
            Determines whether two sequences are equal by comparing the elements.
            </summary>
            <example>
            DataSet1.SequenceEqual(DataSet2);
            </example>
            <param name="evaluator"></param>
            <param name="set1"></param>
            <param name="scriptObj"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.CustomOperators.Single(ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionEvaluator,System.Collections.IEnumerable,System.Object)">
            <summary>
            Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.
            If a condition is supplied, returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.
            </summary>
            <example>
            DataSet1.Single();
            DataSet1.Single(Field2 == "Administrator");
            </example>
            <param name="evaluator"></param>
            <param name="set1"></param>
            <param name="scriptObj"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.CustomOperators.Skip(ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionEvaluator,System.Collections.IEnumerable,System.Object)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
            <example>
            DataSet1.Skip(10);
            </example>
            <param name="evaluator"></param>
            <param name="set1"></param>
            <param name="scriptObj"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.CustomOperators.SkipWhile(ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionEvaluator,System.Collections.IEnumerable,System.Object)">
            <summary>
            Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.
            </summary>
            <example>
            DataSet1.SkipWhile(Field1 &lt; 10);
            </example>
            <param name="evaluator"></param>
            <param name="set1"></param>
            <param name="scriptObj"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.CustomOperators.Take(ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionEvaluator,System.Collections.IEnumerable,System.Object)">
            <summary>
            Returns a specified number of elements from the start of a sequence.
            </summary>
            <example>
            DataSet1.Take(20);
            </example>
            <param name="evaluator"></param>
            <param name="set1"></param>
            <param name="scriptObj"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.CustomOperators.Union(ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionEvaluator,System.Collections.IEnumerable,System.Object)">
            <summary>
            Produces the set union of two sequences by using the default equality comparer.
            </summary>
            <example>
            DataSet1.Union(DataSet2);
            </example>
            <param name="evaluator"></param>
            <param name="set1"></param>
            <param name="scriptObj"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ComponentArt.Silverlight.DataVisualization.CalcEngine.CustomOperators.GroupCompute(ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionEvaluator,System.Collections.IEnumerable,System.Object,System.Object)" -->
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.CustomOperators.Select(ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionEvaluator,System.Collections.IEnumerable,System.Object)">
            <summary>
            Selects and/or creates number of fields from the inut data set.
            </summary>
            <example>
            Set.Select(Product,Year=Date.Year,Sales2=Sales*2,Sales)
            </example>
            <param name="evaluator">The working expression evaluator.</param>
            <param name="set">Input data set.</param>
            <param name="computingScript">List of descriptions of output fields. 
            An item is eighter the name of input field, or it has the form nameOfField=expression. </param>
            <returns>Returns collection of selected objects.</returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.CustomOperators.ValuesOf(ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionEvaluator,System.Collections.IEnumerable,System.Object)">
            <summary>
            Evaluates an expression over the input set and returns an array of evaluated values.
            </summary>
            <example>
            Set.Select(Sales/1000)
            </example>
            <param name="evaluator"></param>
            <param name="set"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.CalcEngine.CustomOperators.GenericComparer">
            <summary>
            <para>For internal use by the DV framework only.   </para>
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.CalcEngine.Aggregate">
            <summary>
            <para>For internal use by the DV framework only.  Used for building and evaluating Calc programs. </para>
            To get started learning about Calc and its uses, see the <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/Calc_IntroductionTo.htm">Introduction to Calc</a> tutorial. <br />
            To learn about the Calc syntax and the programming tools available, see the <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/Calc_Syntax_Welcome.htm">Calc Syntax</a> welcome tutorial. 
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionEvaluationContext">
            <summary>
            <para>For internal use by the DV framework only.  Used for building and evaluating Calc programs. </para>
            To get started learning about Calc and its uses, see the <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/Calc_IntroductionTo.htm">Introduction to Calc</a> tutorial. <br />
            To learn about the Calc syntax and the programming tools available, see the <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/Calc_Syntax_Welcome.htm">Calc Syntax</a> welcome tutorial. 
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionEvaluator">
            <summary>
            <para>For internal use by the DV framework only.  Used for building and evaluating Calc programs. </para>
            To get started learning about Calc and its uses, see the <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/Calc_IntroductionTo.htm">Introduction to Calc</a> tutorial. <br />
            To learn about the Calc syntax and the programming tools available, see the <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/Calc_Syntax_Welcome.htm">Calc Syntax</a> welcome tutorial. 
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionEvaluatorException">
            <summary>
            <para>For internal use by the DV framework only.  Used for building and evaluating Calc programs. </para>
            To get started learning about Calc and its uses, see the <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/Calc_IntroductionTo.htm">Introduction to Calc</a> tutorial. <br />
            To learn about the Calc syntax and the programming tools available, see the <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/Calc_Syntax_Welcome.htm">Calc Syntax</a> welcome tutorial. 
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.CalcEngine.IPropertyProvider">
            <summary>
            <para>For internal use by the DV framework only.  Used for building and evaluating Calc programs. </para>
            To get started learning about Calc and its uses, see the <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/Calc_IntroductionTo.htm">Introduction to Calc</a> tutorial. <br />
            To learn about the Calc syntax and the programming tools available, see the <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/Calc_Syntax_Welcome.htm">Calc Syntax</a> welcome tutorial. 
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionValueNull">
            <summary>
            Expression value encapsulating a null constant
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionValueType">
            <summary>
            Expression value encapsulating a Type
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionValueName">
            <summary>
            Expression value for a namespace
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionValueProperty">
            <summary>
            Expression value for object property.
            Can be indexed.
            Can be assigned value or evaluated.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionValueMethod">
            <summary>
            ExpressionValue encapsulating a methood.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionValueMethod.CreateMethodName(System.String,ComponentArt.Silverlight.DataVisualization.CalcEngine.ASNode)">
            <summary>
            Create full name using parts in the alternate (argList)-namePart pattern in 'args'
            </summary>
            <param name="firstPartOfname"></param>
            <param name="args"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.ExpressionValueMethod.CreateListOfArguments(ComponentArt.Silverlight.DataVisualization.CalcEngine.ASNode)">
            <summary>
            Create list of arguments using elements in the alternate (argList)-namePart pattern in 'args'
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.CalcEngine.GenericVariable">
            <summary>
            <para>For internal use by the DV framework only.  Used for building and evaluating Calc programs. </para>
            To get started learning about Calc and its uses, see the <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/Calc_IntroductionTo.htm">Introduction to Calc</a> tutorial. <br />
            To learn about the Calc syntax and the programming tools available, see the <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/Calc_Syntax_Welcome.htm">Calc Syntax</a> welcome tutorial. 
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.CalcEngine.GenericArray">
            <summary>
            <para>For internal use by the DV framework only.  Used for building and evaluating Calc programs. </para>
            To get started learning about Calc and its uses, see the <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/Calc_IntroductionTo.htm">Introduction to Calc</a> tutorial. <br />
            To learn about the Calc syntax and the programming tools available, see the <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/Calc_Syntax_Welcome.htm">Calc Syntax</a> welcome tutorial. 
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.CalcEngine.Lexer">
            <summary>
            Lexer produces tokens.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser">
            <summary>
            <para>For internal use by the DV framework only.  Used for building and evaluating Calc programs. </para>
            To get started learning about Calc and its uses, see the <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/Calc_IntroductionTo.htm">Introduction to Calc</a> tutorial. <br />
            To learn about the Calc syntax and the programming tools available, see the <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/Calc_Syntax_Welcome.htm">Calc Syntax</a> welcome tutorial. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.#ctor">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.AppendToParent">
            <summary>
            Append topmost node to the children of previous node and bring previous to top
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.Program">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.StatementList">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.StatementListTail">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.PreviousStatementCompleted">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.Statement">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.EmptyStatement">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.IfStatement">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.IfStatementTail">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.WhileStatement">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.ForEachStatement">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.DeclarationAssignmentTail">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.ExpressionList">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.ExpressionListTail">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.Expression">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.AssignmentTail">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.ConditionalExpression">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.ConditionalExpressionTail">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.BuildCondExpressionNode(System.Int32)">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.LogAExpression">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.LogAExpressionTail">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.LogUExpression">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.LogMExpression">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.LogMExpressionTail">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.Term">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.SimpleTerm">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.TermExpressionTail">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.TermExpressionModifier">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.RelExpression">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.MExpression">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.MExpressionTail">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.AExpression">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.AExpressionTail">
            <summary>
            For internal use by the DV framework only. 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ComponentArt.Silverlight.DataVisualization.CalcEngine.Parser.ErrorMessage" -->
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.ColorShift">
            <summary>
            Class describing operations for modifying a Color's properties -- Alpha, Brightness, Hue, Saturation.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.ColorShift.BrightnessShiftProperty">
            <summary>
            Identifies the BrightnessShift dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.ColorShift.SaturationShiftProperty">
            <summary>
            Identifies the SaturationShift dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.ColorShift.HueShiftProperty">
            <summary>
            Identifies the HueShift dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.ColorShift.AlphaShiftProperty">
            <summary>
            Identifies the AlphaShift dependency property.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ColorShift.ApplyOn(System.Windows.Media.Color)">
            <summary>
            Perform a ColorShift operation on the passed Color.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ColorShift.ShiftHue(System.Windows.Media.Color,System.Double)">
            <summary>
            Shifts the hue commponents of the base color. Values are between -1 and 1; value 0 doesn't change the base color.
            </summary>
            <param name="baseColor">The base color.</param>
            <param name="hueShift">The shift ammount. </param>
            <returns>The new color with hue shifted.</returns>
            <remarks>
            The positive orientation of color and normalized hue values:
            <list type="">
            <item >Red (hue = 0)</item>
            <item >Yellow (hue = 1/6 = 0.166666)</item>
            <item >Green (hue = 2/6 = 0.333333)</item>
            <item >Turquiose (hue = 3/6 = 0.5)</item>
            <item >Green (hue = 4/6 = 0.666666)</item>
            <item >Green (hue = 5/6 = 0.833333)</item>
            <item>Red </item>
            </list>
            
            </remarks>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ColorShift.ShiftBrightness(System.Windows.Media.Color,System.Double)">
            <summary>
            Shifts the brightnes of the base color.  Values are between -1 and 1; value 0 doesn't change the base color.
            </summary>
            <param name="baseColor">The base color.</param>
            <param name="brightnessShift">
            The amount of shift. Positive shift adds lightness up to the white color (shift = 1).
            Negative shift subtracts lightness down to the black (shift = -1).
            </param>
            <returns>Modified color.</returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ColorShift.ShiftSaturation(System.Windows.Media.Color,System.Double)">
            <summary>
            Shifts saturation of the base color.   Values are between -1 and 1; value 0 doesn't change the base color.
            </summary>
            <param name="baseColor">The base color.</param>
            <param name="saturationShift">The ammount of shift. Positive shift increases saturation. 
            Negative shift decreases saturation down to gray color (shift = -1).
            </param>
            <returns>Modified color.</returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ColorShift.ShiftAlpha(System.Windows.Media.Color,System.Double)">
            <summary>
            Shifts alpha (opaqueness) of the base color.   Values are between -1 and 1; value 0 doesn't change the base color.
            </summary>
            <param name="baseColor">The base color.</param>
            <param name="alphaShift">The ammount of shift. Positive shift increases opaqueness up to fully opaque color. 
            Negative shift decreases opaqueness down to fully transparent color (shift = -1).</param>
            <returns></returns>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.ColorShift.BrightnessShift">
            <summary>
            Sets or gets the color brightness shift.
            </summary>
            <remarks>
            Values are between -1 and 1; value 0 doesn't change the base color. Positive shift increases brightness up to white. 
            Negative shift decreases brightness down to black.
            </remarks>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.ColorShift.SaturationShift">
            <summary>
            Gets or set the saturation shift.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.ColorShift.HueShift">
            <summary>
            Gets or sets the hue shift.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.ColorShift.AlphaShift">
            <summary>
            Gets or sets the alpha shift.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ColorShift.ColorNorm.#ctor(System.Windows.Media.Color)">
            <summary>
            Construction from 'Color' structure.
            </summary>
            <param name="colorRGB"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ColorShift.ColorNorm.#ctor">
            <summary>
            Default constructor: opaque black.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ColorShift.ColorNorm.FromRGBNorm(System.Double,System.Double,System.Double)">
            <summary>
            Construction from normalized components. The result is opaque.
            </summary>
            <param name="rNorm"></param>
            <param name="gNorm"></param>
            <param name="bNorm"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ColorShift.ColorNorm.FromARGBNorm(System.Double,System.Double,System.Double,System.Double)">
            <summary>
             Construction from normalized components.
            </summary>
            <param name="aNorm"></param>
            <param name="rNorm"></param>
            <param name="gNorm"></param>
            <param name="bNorm"></param>
            <returns></returns>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.ColorShift.ColorNorm.RNorm">
            <summary>
            Normalized red component. 
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.ColorShift.ColorNorm.GNorm">
            <summary>
            Normalized green component. 
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.ColorShift.ColorNorm.BNorm">
            <summary>
            Normalized blue component. 
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.ColorShift.ColorNorm.ANorm">
            <summary>
            Normalized alpha component. 
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.ColorShift.ColorNorm.RGB">
            <summary>
            Conversion to 'Color' structure.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftConverter">
            <summary>
            A type converter for ColorShift class.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftConverter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftGradient">
            <summary>
            ColorShift type that allows for gradient ranges.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftGradient.OpacityProperty">
            <summary>
            Identifies the Opacity dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftGradient.RelativeTransformProperty">
            <summary>
            Identifies the RelativeTransform dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftGradient.TransformProperty">
            <summary>
            Identifies the Transform dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftGradient.ColorInterpolationModeProperty">
            <summary>
            Identifies the ColorInterpolationMode dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftGradient.MappingModeProperty">
            <summary>
            Identifies the MappingMode dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftGradient.SpreadMethodProperty">
            <summary>
            Identifies the SpreadMethod dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftGradient.ColorShiftStopsProperty">
            <summary>
            Identifies the ColorShiftStops dependency property.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftGradient.GetBrush(System.Windows.Media.Color)">
            <summary>
            Returns the resultant gradient as a Brush.
            </summary>
            <param name="baseColor">Dominant color for this gradient.</param>
            <returns>Brush</returns>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftGradient.Opacity">
            <summary>
             Gets or sets the degree of opacity of a System.Windows.Media.Brush.
            </summary>
            
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftGradient.RelativeTransform">
            <summary>
            Gets or sets the transformation that is applied to the brush using relative
            coordinates.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftGradient.Transform">
            <summary>
            Gets or sets the transformation that is applied to the brush.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftGradient.ColorInterpolationMode">
            <summary>
            RGB color space (standard, wide color gamut).
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftGradient.MappingMode">
            <summary>
            Method used to map points on the gradient range.  Default is RelativeToBoundingBox.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftGradient.SpreadMethod">
            <summary>
            Method used when filling in space outside of the defined gradient area. Default is Pad.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftGradient.ColorShiftStops">
            <summary>
            Collection of <see cref="T:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftStop"/>, used to define the gradient ranges.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.LinearColorShiftGradient">
            <summary>
            Linear <see cref="T:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftGradient"/>.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.LinearColorShiftGradient.StartPointProperty">
            <summary>
            Identifies the StartPoint dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.LinearColorShiftGradient.EndPointProperty">
            <summary>
            Identifies the EndPoint dependency property.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.LinearColorShiftGradient.GetBrush(System.Windows.Media.Color)">
            <summary>
            Returns the resultant gradient as a Brush.
            </summary>
            <param name="baseColor">Dominant color for this gradient.</param>
            <returns>Brush</returns>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.LinearColorShiftGradient.StartPoint">
            <summary>
            Position to begin the color modification operations.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.LinearColorShiftGradient.EndPoint">
            <summary>
            Location to end the color modification operations.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.RadialColorShiftGradient">
            <summary>
            Radial <see cref="T:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftGradient"/>
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.RadialColorShiftGradient.CenterProperty">
            <summary>
            Identifies the Center dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.RadialColorShiftGradient.GradientOriginProperty">
            <summary>
            Identifies the GradientOrigin dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.RadialColorShiftGradient.RadiusXProperty">
            <summary>
            Identifies the RadiusX dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.RadialColorShiftGradient.RadiusYProperty">
            <summary>
            Identifies the RadiusY dependency property.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.RadialColorShiftGradient.GetBrush(System.Windows.Media.Color)">
            <summary>
            Returns the resultant gradient as a Brush.
            </summary>
            <param name="baseColor">Dominant color for this gradient.</param>
            <returns>Brush</returns>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.RadialColorShiftGradient.Center">
            <summary>
            Position of the middle of the gradient.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.RadialColorShiftGradient.GradientOrigin">
            <summary>
            The relative starting point between (0, 0) Top-Left and (1, 1) Bottom-Right where the gradient is applied. Default is (0.5,0.5).
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.RadialColorShiftGradient.RadiusX">
            <summary>
            Radius on the the X-axis (horizontal).
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.RadialColorShiftGradient.RadiusY">
            <summary>
            Radius on the Y-axis (vertical).
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftStop">
            <summary>
            Color shift stop used in <see cref="T:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftStopCollection"/>.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftStop.Offset">
            <summary>
            Gets or sets the stop offset. The value is between 0 and 1.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftStop.SaturationShift">
            <summary>
            Saturation shift at this offset. The value is between -1 (unsaturated, gray) and 1 (fully saturated).
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftStop.BrightnesShift">
            <summary>
            Brightnes shift at this offset. The value is between -1 (black) and 1 (white).
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftStop.HueShift">
            <summary>
            Hue shift at this offset. The value is between -1 and 1. 
            Positive values list in the following order: red, yellow, green, turquoise, blue, pink, red, negative in the opposite direction.
            Value 1 (ot -1 or any integer number) shifts arround full circle. Shift between two consecutive colors in the list above is 1/6 = 0.166666.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftStop.AlphaShift">
            <summary>
            Alpha shift at this offset. The value is between -1 (transparent) and 1 (opaque).
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftStopCollection">
            <summary>
            Defines a collection of color shift stops. It can create a ColorShiftStopCollection for a given base color,
            as well as compute interpolated color at a given offset.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftStopCollection.GradientStopCollection(System.Windows.Media.Color)">
            <summary>
            Creates a GradientStopCollection for a given base color. At each offset the color is shifted according to the
            shift values at the stop.
            </summary>
            <param name="baseColor">Base color.</param>
            <returns>Resulting GradientStopCollection.</returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftStopCollection.Interpolate(System.Windows.Media.Color,System.Double)">
            <summary>
            Interpolates collor at a given offset.
            </summary>
            <param name="baseColor">Base color.</param>
            <param name="offset">Offset.</param>
            <returns>Resulting color at the ofsett.</returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftStopCollection.ReadFromString(System.String)">
            <summary>
            Attempts to parse a string into <see cref="T:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftStop"/>s and add these to the collection.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftStopCollection.WriteToString">
            <summary>
            Returns a string-form of the ColorShiftStops in the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftStopCollection.ToString">
            <summary>
            Internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftStopCollectionConverter">
            <summary>
            Type converter for <see cref="T:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftStopCollection"/>. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftStopCollectionConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftStopCollectionConverter"/> class. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftStopCollectionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ColorShiftStopCollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.ColorTable">
            <summary>
            Contains a indexed set of Colors used by Palette.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.ColorTableConverter">
            <summary>
                A type converter for ColorTable class.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.ColorTableConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.ColorTableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.ColorTableConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup">
            <summary>
            Provides Popup behaviour across security contexts.
            In XAML replace Popup with CommonPopup.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.OnOpened">
            <summary>
            Fires the Opened event.  Emulates the Popup.Opened event.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.OnClosed">
            <summary>
            Fires the Closed event.  Emulates the Popup.Closed event.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.Dispose">
            <summary>
            Releases any resources currently in use to ensure proper disposal.  Do not call directly from external code.
            </summary>		
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Dispatches the MouseEnter event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Dispatches the MouseLeave event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Dispatches the MouseMove event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Dispatches the MouseMove event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Dispatches the MouseMove event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.OnApplyTemplate">
            <summary>
            Lifecycle method to be called by the framework.  Do not call directly from external code.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.ForceAdornerProperty">
            <summary> 
            Identifies the ForceAdorner dependency property.
            </summary> 
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.OnForceAdornerPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ForceAdornerProperty property changed handler. 
            </summary>
            <param name="d">CommonPopup that changed its ForceAdorner.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param> 
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.HeightProperty">
            <summary> 
            Identifies the Height dependency property.
            </summary> 
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.OnHeightPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            HeightProperty property changed handler. 
            </summary>
            <param name="d">CommonPopup that changed its Height.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param> 
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.WidthProperty">
            <summary> 
            Identifies the Width dependency property.
            </summary> 
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.OnWidthPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            WidthProperty property changed handler. 
            </summary>
            <param name="d">CommonPopup that changed its Width.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param> 
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.HorizontalOffsetProperty">
            <summary> 
            Identifies the HorizontalOffset dependency property.
            </summary> 
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.OnHorizontalOffsetPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            HorizontalOffsetProperty property changed handler. 
            </summary>
            <param name="d">CommonPopup that changed its HorizontalOffset.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param> 
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.IsOpenProperty">
            <summary> 
            Identifies the IsOpen dependency property.
            </summary> 
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.OnIsOpenPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsOpenProperty property changed handler. 
            </summary>
            <param name="d">CommonPopup that changed its IsOpen.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param> 
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.VerticalOffsetProperty">
            <summary> 
            Identifies the VerticalOffset dependency property.
            </summary> 
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.OnVerticalOffsetPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            VerticalOffsetProperty property changed handler. 
            </summary>
            <param name="d">CommonPopup that changed its VerticalOffset.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param> 
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.VisibilityProperty">
            <summary> 
            Identifies the Visibility dependency property.
            </summary> 
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.OnVisibilityPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            VisibilityProperty property changed handler. 
            </summary>
            <param name="d">CommonPopup that changed its Visibility.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param> 
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.Opened">
            <summary>
            The Opened event.
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.Closed">
            <summary>
            The Closed event.
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.MouseEnter">
            <summary>
            The MouseEnter event override.
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.MouseLeave">
            <summary>
            The MouseLeave event override.
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.MouseMove">
            <summary>
            The MouseMove event override.
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.MouseLeftButtonDown">
            <summary>
            The MouseMove event override.
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.MouseLeftButtonUp">
            <summary>
            The MouseMove event override.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.Child">
            <summary> 
            Gets or sets the Child possible Value of the UIElement object.
            </summary> 
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.ForceAdorner">
            <summary> 
            Gets or sets the ForceAdorner possible Value of the bool object.
            </summary> 
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.Height">
            <summary> 
            Gets or sets the Height possible Value of the double object.
            </summary> 
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.Width">
            <summary> 
            Gets or sets the Width possible Value of the double object.
            </summary> 
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.HorizontalOffset">
            <summary> 
            Gets or sets the HorizontalOffset possible Value of the double object.
            </summary> 
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.IsOpen">
            <summary> 
            Gets or sets the IsOpen possible Value of the bool object.
            </summary> 
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.VerticalOffset">
            <summary> 
            Gets or sets the VerticalOffset possible Value of the double object.
            </summary> 
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.CommonPopup.Visibility">
            <summary> 
            Gets or sets the Visibility possible Value of the Visibility object.
            </summary> 
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBaseContext">
            <summary>
            Relative context available to child content inside this object.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBaseContext.AccentBrushProperty">
            <summary>
            Identifies the AccentBrush dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBaseContext.TitleProperty">
            <summary>
            Identifies the Title dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBaseContext.SubTitleProperty">
            <summary>
            Identifies the SubTitle dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBaseContext.HeaderContentProperty">
            <summary>
            Identifies the HeaderContent dependency property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBaseContext.AccentBrush">
            <summary>
            Gets or sets the HeaderContent property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBaseContext.Title">
            <summary>
            Gets or sets the Title property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBaseContext.SubTitle">
            <summary>
            Gets or sets the SubTitle property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBaseContext.HeaderContent">
            <summary>
            Gets or sets the HeaderContent property.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBase">
            <summary>
            Base class for Dashboard content controls.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.IControl">
            <summary>
            Interface all CompoentArt controls implement.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.IThemable">
            <summary>
            Interface that defines how a Theme is applied to a control.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.IPalettizable">
            <summary>
            Interface that describes a class that can have a <see cref="P:ComponentArt.Silverlight.DataVisualization.IPalettizable.Palette"/> applied to it.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.IPalettizable.Palette">
            <summary>
            Allows users to set the Palette on the class.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.IPalettizable.EffectivePalette">
            <summary>
            Currently used Palette, inherited or default if not set through Palette.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBase.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBase.DashboardPanelBase_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBase.AccentBrushProperty">
            <summary>
            Identifies the AccentBrush dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBase.TitleProperty">
            <summary>
            Identifies the Title dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBase.SubTitleProperty">
            <summary>
            Identifies the SubTitle dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBase.HeaderContentProperty">
            <summary>
            Identifies the HeaderContent dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBase.HeaderTemplateProperty">
            <summary>
            Identifies the HeaderTemplate dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBase.HeaderVisibilityProperty">
            <summary>
            Identifies the HeaderVisibility dependency property.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBase.OnApplyTemplate">
            <summary>
            Lifecycle method to be called by the framework.  Do not call directly from external code.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBase.ThemeProperty">
            <summary>
            ThemeProperty dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBase.ThemeVariantProperty">
            <summary>
            ThemeVariantProperty dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBase.EffectivePaletteProperty">
            <summary>
            EffectivePaletteProperty dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBase.PaletteProperty">
            <summary>
            PaletteProperty dependency property.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBase.Dispose">
            <summary>
            Releases resources used by this <see cref="T:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBase"/>.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBase.AccentBrush">
            <summary>
            Gets or sets the AccentBrush property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBase.Title">
            <summary>
            Gets or sets the Title property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBase.SubTitle">
            <summary>
            Gets or sets the SubTitle property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBase.HeaderContent">
            <summary>
            Gets or sets the HeaderContent property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBase.HeaderTemplate">
            <summary>
            Gets or sets the HeaderTemplate property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBase.HeaderVisibility">
            <summary>
            Gets or sets the HeaderVisibility property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBase.Theme">
            <summary>
            Theme property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBase.ThemeVariant">
            <summary>
            ThemeVariant property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBase.EffectivePalette">
            <summary>
            EffectivePalette property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelBase.Palette">
            <summary>
            Palette property.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup">
            <summary>
            Message window control which appears in front of existing content.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.IndexProperty">
            <summary>
            Identifies the Index dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.IndexTemplateProperty">
            <summary>
            Identifies the IndexTemplate dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.PointerMarginProperty">
            <summary>
            Identifies the PointerMargin dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.PointerVisibilityProperty">
            <summary>
            Identifies the PointerVisibility dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.ValueProperty">
            <summary>
            Identifies the ValueTemplate dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.ValueTemplateProperty">
            <summary>
            Identifies the ValueTemplate dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.bTemplateApplied">
            <summary>
            
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.OnApplyTemplate">
            <summary>
            Lifecycle method to be called by the framework.  Do not call directly from external code.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.Hide">
            <summary>
            Signals to the popup that it should hide itself. HideDelay and HideDuration are in effect.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.HideNow">
            <summary>
            Forces the popup to hide immediately.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.Show(System.Windows.FrameworkElement,System.Nullable{System.Windows.Point})">
            <summary>
            Signals to the popup that it should show itself, at the given point relative to the given element. ShowDelay and ShowDuration are considered, as well as subsequent calls to Hide.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.Show(System.Windows.FrameworkElement)">
            <summary>
            Signals to the popup that it should show itself, relative to the given element. ShowDelay and ShowDuration are considered, as well as subsequent calls to Hide.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.Show(System.Windows.Input.MouseEventArgs)">
            <summary>
            Signals to the popup that it should show itself, relative to the given mouse event. ShowDelay and ShowDuration are considered, as well as subsequent calls to Hide.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.ThemeProperty">
            <summary>
            ThemeProperty dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.ThemeVariantProperty">
            <summary>
            ThemeVariantProperty dependency property.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.Dispose">
            <summary>
            Releases resources used by this <see cref="T:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup"/>.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.AlignmentX">
            <summary>
            How to horizontally align the popup relative to the target.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.AlignmentY">
            <summary>
            How to vertically align the popup relative to the target.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.DeferHideUntilMouseLeave">
            <summary>
            Whether to stay open if the mouse is over the popup, until the mouse leaves the popup. Default: false.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.HideDelay">
            <summary>
            The delay, in milliseconds, after which to hide the popup following the request to do so. Default: 500.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.HideDuration">
            <summary>
            The duration, in milliseconds, of the popup hide animation. Default: 300.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.ShowDelay">
            <summary>
            The delay, in milliseconds, after which to show the popup following the request to do so. Default: 400.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.ShowDuration">
            <summary>
            The duration, in milliseconds, of the popup reveal animation. Default: 300.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.ShowChrome">
            <summary>
            Whether to display control chrome and an index header in addition to the value template. Default: true.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.TargetElementName">
            <summary>
            The name of the target element over which to appear, if visible by default.
            </summary>
            <seealso cref="T:System.Windows.Visibility"/>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.Index">
            <summary>
            Gets or sets the Index property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.IndexTemplate">
            <summary>
            Gets or sets the IndexTemplate property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.PointerMargin">
            <summary>
            Gets or sets the PointerMargin property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.PointerVisibility">
            <summary>
            Gets or sets the PointerVisibility property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.Value">
            <summary>
            Gets or sets the Value property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.ValueTemplate">
            <summary>
            Gets or sets the ValueTemplate property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.Theme">
            <summary>
            Theme property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPopup.ThemeVariant">
            <summary>
            ThemeVariant property.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.DashboardLayoutContext">
            <summary>
            Container for individual controls within the dashboard.  Relative context available to child content inside this <see cref="T:ComponentArt.Silverlight.DataVisualization.Common.DashboardLayout"/>.
            </summary>
            <remarks>
            To learn the basics of dashboard layout, see <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/CommonConcepts_Layout.htm">this tutorial</a>. <br/>
            </remarks>
             <seealso cref="T:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanel"/>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.DashboardLayout">
            <summary>
            Content control for holding other <see cref="T:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanel"/>s while propagating <see cref="T:ComponentArt.Silverlight.DataVisualization.Palette"/> and <see cref="T:ComponentArt.Silverlight.DataVisualization.Theming"/> style properties.
            </summary>
            <remarks>
            <para>Compatible child content will automatically inherit the <see cref="T:ComponentArt.Silverlight.DataVisualization.Palette"/> and <see cref="T:ComponentArt.Silverlight.DataVisualization.Theming"/>.</para>
             To learn the basics of dashboard layout, see <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/CommonConcepts_Layout.htm">this tutorial</a>.
            </remarks>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.DashboardLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentArt.Silverlight.DataVisualization.Common.DashboardLayout"/> class. 
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanelContext">
            <summary>
            Relative context available to child content inside this <see cref="T:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanel"/>.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanel">
            <summary>
            Content control with a pre-styled border and header area, that contains individual dashboard controls within it.  It also propagates style settings to every child control.
            </summary>
            <remarks>
            <para>Compatible child content will automatically inherit the <see cref="T:ComponentArt.Silverlight.DataVisualization.Palette"/> and <see cref="T:ComponentArt.Silverlight.DataVisualization.Theming"/>.
            </para>
            To learn the basics of dashboard layout, see <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/CommonConcepts_Layout.htm">this tutorial</a>. <br/>
            </remarks>
            <seealso cref="T:ComponentArt.Silverlight.DataVisualization.Common.DashboardLayout"/>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanel"/> class. 
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanel.IsContentLoadedProperty">
            <summary>
            Identifies the IsContentLoaded dependency property.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanel.OnApplyTemplate">
            <summary>
            Will automatically toggle between loading and loaded visual states.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanel.Dispose">
            <summary>
            Releases resources used by this <see cref="T:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanel"/>.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.DashboardPanel.IsContentLoaded">
            <summary>
            Whether to show or hide the child content, and conversely hide or show a loading indicator.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.DataSourceProvider.EndDefer">
            <summary>
            
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.DataSourceProvider.UpdateWithNewResult(System.Object)">
            <summary>
            
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.DataSourceProvider.UpdateWithNewResult(System.Exception,System.Object,ComponentArt.Silverlight.DataVisualization.Data.DataSourceProvider.DispatcherOperationCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="error"></param>
            <param name="newData"></param>
            <param name="completionWork"></param>
            <param name="callbackArgs"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.DataSourceProvider.DataSourceProvider_DataChanged(System.Object,System.EventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.GetCatalogsCompletedEventArgs">
            <summary>
            Provides data for the GetCatalogsCompleted event.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.GetCatalogsCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object,System.Collections.Generic.IEnumerable{ComponentArt.Silverlight.DataVisualization.Data.MD.Catalog})">
            <summary>
            Initializes a new instance of the GetCatalogsCompletedEventArgs class.
            </summary>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="cancelled">A value that indicates whether the asynchronous operation was cancelled.</param>
            <param name="userState">The optional user-supplied state object that is used to identify the task that raised the GetCatalogsCompleted event.</param>
            <param name="catalogs">A collection of Catalogs returned by the asynchronous operation.</param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.GetCatalogsCompletedEventArgs.Catalogs">
            <summary>
            Gets a collection of Catalogs returned by an asynchronous operation.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.GetCubesCompletedEventArgs">
            <summary>
            Provides data for the GetCubesCompleted event.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.GetCubesCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object,System.Collections.Generic.IEnumerable{ComponentArt.Silverlight.DataVisualization.Data.MD.Cube})">
            <summary>
            Initializes a new instance of the GetCubesCompletedEventArgs class.
            </summary>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="cancelled">A value that indicates whether the asynchronous operation was cancelled.</param>
            <param name="userState">The optional user-supplied state object that is used to identify the task that raised the GetCubesCompleted event.</param>
            <param name="catalogs">A collection of Cubes returned by the asynchronous operation.</param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.GetCubesCompletedEventArgs.Cubes">
            <summary>
            Gets a collection of Cubes returned by an asynchronous operation.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.GetDimensionsCompletedEventArgs">
            <summary>
            Provides data for the GetDimensionsCompleted event.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.GetDimensionsCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object,System.Collections.Generic.IEnumerable{ComponentArt.Silverlight.DataVisualization.Data.MD.Dimension})">
            <summary>
            Initializes a new instance of the GetDimensionsCompletedEventArgs class.
            </summary>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="cancelled">A value that indicates whether the asynchronous operation was cancelled.</param>
            <param name="userState">The optional user-supplied state object that is used to identify the task that raised the GetDimensionsCompleted event.</param>
            <param name="catalogs">A collection of Dimensions returned by the asynchronous operation.</param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.GetDimensionsCompletedEventArgs.Dimensions">
            <summary>
            Gets a collection of Dimensions returned by an asynchronous operation.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.GetMeasureGroupsCompletedEventArgs">
            <summary>
            Provides data for the GetMeasureGroupsCompleted event.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.GetMeasureGroupsCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object,System.Collections.Generic.IEnumerable{ComponentArt.Silverlight.DataVisualization.Data.MD.MeasureGroup})">
            <summary>
            Initializes a new instance of the GetMeasureGroupsCompletedEventArgs class.
            </summary>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="cancelled">A value that indicates whether the asynchronous operation was cancelled.</param>
            <param name="userState">The optional user-supplied state object that is used to identify the task that raised the GetMeasureGroupsCompleted event.</param>
            <param name="catalogs">A collection of MeasureGroups returned by the asynchronous operation.</param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.GetMeasureGroupsCompletedEventArgs.MeasureGroups">
            <summary>
            Gets a collection of MeasureGroups returned by an asynchronous operation.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.GetMeasureGroupDimensionsCompletedEventArgs">
            <summary>
            Provides data for the GetMeasureGroupDimensionsCompleted event.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.GetMeasureGroupDimensionsCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object,System.Collections.Generic.IEnumerable{ComponentArt.Silverlight.DataVisualization.Data.MD.Dimension})">
            <summary>
            Initializes a new instance of the GetMeasureGroupDimensionsCompletedEventArgs class.
            </summary>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="cancelled">A value that indicates whether the asynchronous operation was cancelled.</param>
            <param name="userState">The optional user-supplied state object that is used to identify the task that raised the GetMeasureGroupDimensionsCompleted event.</param>
            <param name="catalogs">A collection of Dimensions returned by the asynchronous operation.</param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.GetMeasureGroupDimensionsCompletedEventArgs.Dimensions">
            <summary>
            Gets a collection of Dimensions returned by an asynchronous operation.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.GetMeasuresCompletedEventArgs">
            <summary>
            Provides data for the GetMeasuresCompleted event.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.GetMeasuresCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object,System.Collections.Generic.IEnumerable{ComponentArt.Silverlight.DataVisualization.Data.MD.Measure})">
            <summary>
            Initializes a new instance of the GetMeasuresCompletedEventArgs class.
            </summary>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="cancelled">A value that indicates whether the asynchronous operation was cancelled.</param>
            <param name="userState">The optional user-supplied state object that is used to identify the task that raised the GetMeasuresCompleted event.</param>
            <param name="catalogs">A collection of Measures returned by the asynchronous operation.</param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.GetMeasuresCompletedEventArgs.Measures">
            <summary>
            Gets a collection of Measures returned by an asynchronous operation.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.GetHierarchiesCompletedEventArgs">
            <summary>
            Provides data for the GetHierarchiesCompleted event.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.GetHierarchiesCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object,System.Collections.Generic.IEnumerable{ComponentArt.Silverlight.DataVisualization.Data.MD.Hierarchy})">
            <summary>
            Initializes a new instance of the GetHierarchiesCompletedEventArgs class.
            </summary>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="cancelled">A value that indicates whether the asynchronous operation was cancelled.</param>
            <param name="userState">The optional user-supplied state object that is used to identify the task that raised the GetHierarchiesCompleted event.</param>
            <param name="catalogs">A collection of Hierarchies returned by the asynchronous operation.</param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.GetHierarchiesCompletedEventArgs.Hierarchies">
            <summary>
            Gets a collection of Hierarchy objects returned by an asynchronous operation.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.GetLevelsCompletedEventArgs">
            <summary>
            Provides data for the GetLevelsCompleted event.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.GetLevelsCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object,System.Collections.Generic.IEnumerable{ComponentArt.Silverlight.DataVisualization.Data.MD.Level})">
            <summary>
            Initializes a new instance of the GetLevelsCompletedEventArgs class.
            </summary>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="cancelled">A value that indicates whether the asynchronous operation was cancelled.</param>
            <param name="userState">The optional user-supplied state object that is used to identify the task that raised the GetLevelsCompleted event.</param>
            <param name="catalogs">A collection of Levels returned by the asynchronous operation.</param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.GetLevelsCompletedEventArgs.Levels">
            <summary>
            Gets a collection of Levels returned by an asynchronous operation.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.GetMembersCompletedEventArgs">
            <summary>
            Provides data for the GetMembersCompleted event.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.GetMembersCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object,System.Collections.Generic.IEnumerable{ComponentArt.Silverlight.DataVisualization.Data.MD.Member})">
            <summary>
            Initializes a new instance of the GetMembersCompletedEventArgs class.
            </summary>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="cancelled">A value that indicates whether the asynchronous operation was cancelled.</param>
            <param name="userState">The optional user-supplied state object that is used to identify the task that raised the GetMembersCompleted event.</param>
            <param name="catalogs">A collection of Members returned by the asynchronous operation.</param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.GetMembersCompletedEventArgs.Members">
            <summary>
            Gets a collection of Members returned by an asynchronous operation.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.GetChildMembersCompletedEventArgs">
            <summary>
            Provides data for the GetChildMembersCompleted event.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.GetChildMembersCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object,System.Collections.Generic.IEnumerable{ComponentArt.Silverlight.DataVisualization.Data.MD.Member})">
            <summary>
            Initializes a new instance of the GetChildMembersCompletedEventArgs class.
            </summary>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="cancelled">A value that indicates whether the asynchronous operation was cancelled.</param>
            <param name="userState">The optional user-supplied state object that is used to identify the task that raised the GetChildMembersCompleted event.</param>
            <param name="catalogs">A collection of Members returned by the asynchronous operation.</param>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.Attribute">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.IUniqueMember">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.IUniqueMember.Caption">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.IUniqueMember.UniqueName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.Attribute.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.Attribute.#ctor(System.String,System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="caption"></param>
            <param name="uniqueName"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Attribute.Caption">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Attribute.UniqueName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Attribute.Members">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.Axis">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.Axis.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.Axis.FindMember(System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="uniqueName"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.Axis.FindMember(System.String,ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNodeCollection)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="uniqueName"></param>
            <param name="members"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.Axis.GetCellOrdinal(ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNode)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="memberNode"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.Axis.CountMembers">
            <summary>
            This member is for internal use only
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.Axis.CountMembers(System.Collections.Generic.ICollection{ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNode})">
            <summary>
            This member is for internal use only
            </summary>
            <param name="memberNodes"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.Axis.OnHierarchyChanged">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.Axis.members_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.Axis.axisHierarchies_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Data.MD.Axis.HierarchyChanged">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Axis.AxisHierarchies">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Axis.Members">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Axis.Length">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.AxisCollection">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.AxisCollection.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.AxisCollection.#ctor(System.Collections.Generic.IEnumerable{ComponentArt.Silverlight.DataVisualization.Data.MD.Axis})">
            <summary>
            This member is for internal use only
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.AxisCollection.#ctor(System.Collections.Generic.List{ComponentArt.Silverlight.DataVisualization.Data.MD.Axis})">
            <summary>
            This member is for internal use only
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.AxisCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.AxisCollection.memberHierarchy_HierarchyChanged(System.Object,ComponentArt.Silverlight.DataVisualization.Data.MD.HierarchyChangedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Data.MD.AxisCollection.HierarchyChanged">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.Catalog">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.Catalog.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Catalog.Name">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Catalog.Description">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Catalog.Roles">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Catalog.DateModified">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.Cell">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.Cell.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.Cell.#ctor(System.Double,System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="value"></param>
            <param name="formattedValue"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Cell.Value">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Cell.FormattedValue">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.ReadyState">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Data.MD.ReadyState.Ready">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Data.MD.ReadyState.Changing">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Data.MD.ReadyState.Error">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.ReadyStateChangedEventArgs">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.ReadyStateChangedEventArgs.#ctor(ComponentArt.Silverlight.DataVisualization.Data.MD.ReadyState)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="state"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.ReadyStateChangedEventArgs.State">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.Filter">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.Filter.#ctor">
            <summary>
            Initializes a new instance of the Filter class.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.Filter.OnFilterChanged">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Data.MD.Filter.FilterChanged">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Filter.Hierarchy">
            <summary>
            Gets or sets the Hierarchy that this Filter applies to.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.FilterCollection">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.FilterCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.FilterCollection.OnFilterChanged">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.FilterCollection.filter_FilterChanged(System.Object,System.EventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Data.MD.FilterCollection.FilterChanged">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.Level.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Level.Name">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Level.Caption">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Level.UniqueName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Level.Description">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Level.LevelNumber">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Level.ParentHierarchy">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Level.Members">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.MeasureCollection">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MeasureCollection.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.MeasureDimension">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.DimensionBase">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.DimensionBase.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.DimensionBase.Name">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.DimensionBase.Caption">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.DimensionBase.UniqueName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.DimensionBase.Description">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.DimensionBase.ParentCube">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.DimensionBase.DefaultHierarchy">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MeasureDimension.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MeasureDimension.MeasureGroups">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MeasureDimension.Measures">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.Cube">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.Cube.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Cube.Name">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Cube.Caption">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Cube.Dimensions">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Cube.Measures">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.Dimension">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.Dimension.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Dimension.Hierarchies">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.Hierarchy">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.Hierarchy.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Hierarchy.Name">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Hierarchy.Caption">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Hierarchy.UniqueName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Hierarchy.DisplayFolder">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Hierarchy.Description">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Hierarchy.HierarchyOrigin">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Hierarchy.DefaultMember">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Hierarchy.ParentDimension">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Hierarchy.Levels">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.HierarchyChangedEventArgs">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.HierarchyChangedEventArgs.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.HierarchyChangedEventArgs.#ctor(ComponentArt.Silverlight.DataVisualization.Data.MD.Axis)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="hierarchy"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.HierarchyChangedEventArgs.#ctor(ComponentArt.Silverlight.DataVisualization.Data.MD.Axis,ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNode)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="hierarchy"></param>
            <param name="node"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.HierarchyChangedEventArgs.Hierarchy">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.HierarchyChangedEventArgs.Node">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.IMemberNodeCollection">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.IMemberNodeCollection.ParentNode">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource">
            <summary>
            Common base class for a multi-dimensional data-source.
            </summary>
            <remarks>
            All multi-dimensional data sources should extend this base class as it is used in the implementation of <see cref="!:PivotGrid"/> and <see cref="!:PivotTree"/>.
            <para>A useful implementation is the XMLA MdDataSource <see cref="!:ComponentArt.Win.DataVisualization.Data.Olap.Xmla.MD.MdDataSource"/></para></remarks>
            <seealso cref="!:ComponentArt.Silverlight.DataVisualization.DataGrids.PivotGrid"/> <seealso cref="!:ComponentArt.Silverlight.DataVisualization.DataGrids.PivotTree"/>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.#ctor">
            <summary>
            Initializes a new instance of the MdDataSource class.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.OnCubeStateChanged(ComponentArt.Silverlight.DataVisualization.Data.MD.ReadyStateChangedEventArgs)">
            <summary>
            Occurs when the state of the cube data changes.
            </summary>
            <param name="e">A ReadyStateChangedEventArgs object containing event data.</param>                              
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.OnDataStateChanged(ComponentArt.Silverlight.DataVisualization.Data.MD.ReadyStateChangedEventArgs)">
            <summary>
            Raises the DataStateChanged event. 
            </summary>
            <param name="e">A ReadyStateChangedEventArgs object containing event data.</param>                              
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.OnGetCatalogsCompleted(ComponentArt.Silverlight.DataVisualization.Data.MD.GetCatalogsCompletedEventArgs)">
            <summary>
            Raises the GetCatalogsCompleted event. 
            </summary>
            <param name="e">A GetCatalogsCompletedEventArgs object containing event data.</param>                              
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.OnGetCubesCompleted(ComponentArt.Silverlight.DataVisualization.Data.MD.GetCubesCompletedEventArgs)">
            <summary>
            Raises the GetCubesCompleted event. 
            </summary>
            <param name="e">A GetCubesCompletedEventArgs object containing event data.</param>                              
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.OnGetDimensionsCompleted(ComponentArt.Silverlight.DataVisualization.Data.MD.GetDimensionsCompletedEventArgs)">
            <summary>
            Raises the GetDimensionsCompleted event. 
            </summary>
            <param name="e">A GetDimensionsCompletedEventArgs object containing event data.</param>                              
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.OnGetMeasureGroupsCompleted(ComponentArt.Silverlight.DataVisualization.Data.MD.GetMeasureGroupsCompletedEventArgs)">
            <summary>
            Raises the GetMeasureGroupsCompleted event. 
            </summary>
            <param name="e">A GetMeasureGroupsCompletedEventArgs object containing event data.</param>                              
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.OnGetMeasureGroupDimensionsCompleted(ComponentArt.Silverlight.DataVisualization.Data.MD.GetMeasureGroupDimensionsCompletedEventArgs)">
            <summary>
            Raises the GetMeasureGroupDimensionsCompleted event. 
            </summary>
            <param name="e">A GetMeasureGroupDimensionsCompletedEventArgs object containing event data.</param>                              
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.OnGetMeasuresCompleted(ComponentArt.Silverlight.DataVisualization.Data.MD.GetMeasuresCompletedEventArgs)">
            <summary>
            Raises the GetMeasuresCompleted event. 
            </summary>
            <param name="e">A GetMeasuresCompletedEventArgs object containing event data.</param>                              
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.OnGetHierarchiesCompleted(ComponentArt.Silverlight.DataVisualization.Data.MD.GetHierarchiesCompletedEventArgs)">
            <summary>
            Raises the GetHierarchiesCompleted event. 
            </summary>
            <param name="e">A GetHierarchiesCompletedEventArgs object containing event data.</param>                              
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.OnGetLevelsCompleted(ComponentArt.Silverlight.DataVisualization.Data.MD.GetLevelsCompletedEventArgs)">
            <summary>
            Raises the GetLevelsCompleted event. 
            </summary>
            <param name="e">A GetLevelsCompletedEventArgs object containing event data.</param>                              
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.OnGetMembersCompleted(ComponentArt.Silverlight.DataVisualization.Data.MD.GetMembersCompletedEventArgs)">
            <summary>
            Raises the GetMembersCompleted event. 
            </summary>
            <param name="e">A GetMembersCompletedEventArgs object containing event data.</param>                              
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.OnGetChildMembersCompleted(ComponentArt.Silverlight.DataVisualization.Data.MD.GetChildMembersCompletedEventArgs)">
            <summary>
            Raises the GetChildMembersCompleted event. 
            </summary>
            <param name="e">A GetChildMembersCompletedEventArgs object containing event data.</param>                              
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event. 
            </summary>
            <param name="propertyName">The name of the property that has changed.</param>                              
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event. 
            </summary>
            <param name="e">A PropertyChangedEventArgs object containing event data.</param>                              
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetCellData(System.Int32,System.Int32)">
            <summary>
            Gets the cell at the specified row and column.
            </summary>
            <param name="rowOrdinal">The ordinal value of the row.</param>
            <param name="columnOrdinal">The ordinal value of the column.</param>
            <returns>The cell at the specified row and column if it exists; otherwise, null.</returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetCellData(System.Int32[])">
            <summary>
            Gets the cell at the specified n-dimensional coordinates.
            </summary>
            <param name="ordinals">The coordinates of the cell to retrieve.</param>
            <returns>The cell at the specified n-dimensional coordinates if it exists; otherwise, null.</returns>
            <remarks>
            Ordinals and Axes should have the same dimensionality.
            </remarks>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetCellData(System.Int32[],System.Int32)">
            <summary>
            Gets a set of cells along the specified axis.
            </summary>
            <param name="ordinals">The coordinates of the cells to retrieve; the fixed axis ordinal is ignored.</param>
            <param name="fixedAxis">The axis to fix.</param>
            <returns>A set of cells along the specified axis.</returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetCatalogsAsync">
            <summary>
            Performs a catalog lookup. This method does not block the calling thread.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetCatalogsAsync(System.Object)">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetCubesAsync">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetCubesAsync(System.Object)">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetDimensionsAsync">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetDimensionsAsync(System.Object)">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetMeasureGroupsAsync">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetMeasureGroupsAsync(System.Object)">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetMeasureGroupDimensionsAsync(ComponentArt.Silverlight.DataVisualization.Data.MD.MeasureGroup)">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetMeasureGroupDimensionsAsync(ComponentArt.Silverlight.DataVisualization.Data.MD.MeasureGroup,System.Object)">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetMeasuresAsync">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetMeasuresAsync(System.Object)">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetHierarchiesAsync(ComponentArt.Silverlight.DataVisualization.Data.MD.Dimension)">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetHierarchiesAsync(ComponentArt.Silverlight.DataVisualization.Data.MD.Dimension,System.Object)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="dimension"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetLevelsAsync(ComponentArt.Silverlight.DataVisualization.Data.MD.Hierarchy)">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetLevelsAsync(ComponentArt.Silverlight.DataVisualization.Data.MD.Hierarchy,System.Object)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="hierarchy"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetMembersAsync(ComponentArt.Silverlight.DataVisualization.Data.MD.Level)">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetMembersAsync(ComponentArt.Silverlight.DataVisualization.Data.MD.Level,System.Object)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetChildMembersAsync(ComponentArt.Silverlight.DataVisualization.Data.MD.Member)">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetChildMembersAsync(ComponentArt.Silverlight.DataVisualization.Data.MD.Member,System.Object)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.DeferRefresh">
            <summary>
            Initiates deferral of auto-refresh when properties are changed.  Be sure to call EndDeferRefresh() when done.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.EndDeferRefresh">
            <summary>
            Ends deferral of auto-refresh when properties are changed.  If changes have occurred, will auto-refresh.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.SuppressRefresh">
            <summary>
            Initiates suppression of auto-refresh when properties are changed.  Be sure to call EndSuppressRefresh() when done.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.EndSuppressRefresh">
            <summary>
            Ends suppression of auto-refresh when properties are changed.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.Refresh">
            <summary>
            Refreshes the underlying data-set.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.Refresh(System.Boolean)">
            <summary>
            Refreshes the underlying data-set optionally ignoring the state if IsRefreshDeferred and IsRefreshSuppressed.
            </summary>
            <param name="forceRefresh">True to force a refresh; false to respect the state of IsRefreshDeferred and IsRefreshSuppressed</param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.Axes_HierarchyChanged(System.Object,ComponentArt.Silverlight.DataVisualization.Data.MD.HierarchyChangedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="a"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.Axes_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.Filters_FilterChanged(System.Object,System.EventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.Filters_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.Measures_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.InvalidateAxes">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.CubeStateChanged">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.DataStateChanged">
            <summary>
            Occurs when the state of data changes.
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetCatalogsCompleted">
            <summary>
            Occurs when an asynchronous catalog lookup operation completes.
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetCubesCompleted">
            <summary>
            Occurs when an asynchronous cube lookup operation completes.
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetDimensionsCompleted">
            <summary>
            Occurs when an asynchronous dimension lookup operation completes.
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetMeasureGroupsCompleted">
            <summary>
            Occurs when an asynchronous measure-group lookup operation completes.
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetMeasureGroupDimensionsCompleted">
            <summary>
            Occurs when an asynchronous measure-group dimension lookup operation completes.
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetMeasuresCompleted">
            <summary>
            Occurs when an asynchronous measure lookup operation completes.
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetHierarchiesCompleted">
            <summary>
            Occurs when an asynchronous hierarchy lookup operation completes.
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetLevelsCompleted">
            <summary>
            Occurs when an asynchronous level lookup operation completes.
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetMembersCompleted">
            <summary>
            Occurs when an asynchronous member lookup operation completes.
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.GetChildMembersCompleted">
            <summary>
            Occurs when an asynchronous child member lookup operation completes.
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.PropertyChanged">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.Uri">
            <summary>
            Gets or sets the URI where data will be loaded from.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.Caption">
            <summary>
            Gets or sets the Caption of this data-source.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.CatalogName">
            <summary>
            Gets or sets the name of the catalog this data-source represents.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.CubeName">
            <summary>
            Gets or sets the name of the cube this data-source represents.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.Cube">
            <summary>
            Gets a reference to a Cube represented by this datasource.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.Axes">
            <summary>
            Gets the collection of Axis objects.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.Filters">
            <summary>
            Gets a colleciton of Filter objects applied to the data-source.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.Measures">
            <summary>
            Gets a collection Of Measure objects for the data-source.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.IsInitialized">
            <summary>
            Gets a value indicating whether the object has been initialized.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.CubeState">
            <summary>
            Gets a value indicating the state of the cube data.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.DataState">
            <summary>
            Gets a value indicating the state of the data.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.Error">
            <summary>
            Gets a reference to the last exception that occurred while loading data; 
            null if the last operation was successful.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.InDesignMode">
            <summary>
            Gets a value indicating whether the instance is running on a design surface.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.IsRefreshDeferred">
            <summary>
            Gets whether the data-source is deferring auto-refresh when a property changes.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.IsRefreshSuppressed">
            <summary>
            Gets where the data-source is suppress 
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.Measure">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.Measure.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Measure.Name">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Measure.Caption">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Measure.UniqueName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Measure.Description">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Measure.Expression">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Measure.Units">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Measure.NumericPrecision">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Measure.NumericScale">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Measure.ParentMeasureGroup">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Measure.ParentDimension">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.MeasureGroup">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MeasureGroup.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MeasureGroup.Name">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MeasureGroup.Caption">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MeasureGroup.Description">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MeasureGroup.ParentDimension">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MeasureGroup.Measures">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.Member">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.Member.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Member.Caption">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Member.UniqueName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Member.HierarchyName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Member.Description">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.Member.ParentLevel">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberFilterType">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberFilter">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberFilter.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberFilter.Items_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberFilter.Items">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberFilterItem">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberFilterItem.#ctor">
            <summary>
            Initializes a new instance of the MemberFilterItem class.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberFilterItem.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event. 
            </summary>
            <param name="propertyName">The name of the property that has changed.</param>                              
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberFilterItem.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event. 
            </summary>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>                              
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberFilterItem.FilterType">
            <summary>
            Gets or sets the type of filter the associated member represents.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberFilterItem.Member">
            <summary>
            Gets or sets the Member to be filtered by.
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberFilterItem.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNode">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNode.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNode.#ctor(ComponentArt.Silverlight.DataVisualization.Data.MD.Member)">
            <summary>
                                                                                                         
            </summary>
            <param name="member"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNode.OnPropertyChanged(System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNode.OnPropertyChanged(System.String,System.Object)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="propertyName"></param>
            <param name="sender"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNode.children_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNode.Member">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNode.Parent">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNode.Children">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNode.Ordinal">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNode.DimensionOrdinal">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNode.IsExpandable">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNode.IsExpanded">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNode.PropertyChanged">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNodeCollection">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNodeCollection.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNodeCollection.#ctor(ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNode)">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNodeCollection.#ctor(System.Collections.Generic.IEnumerable{ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNode})">
            <summary>
            This member is for internal use only
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNodeCollection.#ctor(System.Collections.Generic.List{ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNode})">
            <summary>
            This member is for internal use only
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNodeCollection.SetParentNode(ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNode,System.Collections.Generic.IEnumerable{ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNode})">
            <summary>
            This member is for internal use only
            </summary>
            <param name="parentNode"></param>
            <param name="memberNodes"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNodeCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNodeCollection.AttachMemberNode(ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNode)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="memberNode"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNodeCollection.DetachMemberNode(ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNode)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="memberNode"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNodeCollection.memberNode_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNodeCollection.ParentNode">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MethodParameterCollection">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MethodParameterCollection.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MethodParameterCollection.#ctor(System.Collections.Generic.IEnumerable{ComponentArt.Silverlight.DataVisualization.Data.MethodParameter})">
            <summary>
            This member is for internal use only
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MethodParameterCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.MethodParameterCollection.methodParam_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.MethodParameter">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Data.MethodParameter.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Data.MethodParameter.TypeProperty">
            <summary>
            Identifies the Type dependency property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MethodParameter.Value">
            <summary>
            Gets or sets the Value property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.MethodParameter.Type">
            <summary>
            Gets or sets the Type property.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.ObjectDataProvider.#ctor">
            <summary>
            Base class for a dataprovider class.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.ObjectDataProvider.CreateObjectInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.ObjectDataProvider.EndInit">
            <summary>
            
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.ObjectDataProvider.GetConstructorParameters">
            <summary>
            This member is for internal use only
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.ObjectDataProvider.GetMethodParameters">
            <summary>
            This member is for internal use only
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.ObjectDataProvider.BeginQuery">
            <summary>
            
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.ObjectDataProvider.DoQuery(System.Object)">
            <summary>
            
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.ObjectDataProvider.methodParams_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.ObjectDataProvider.constructorParams_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.ObjectDataProvider.DisposeOfInstance(System.Object)">
            <summary>
            
            </summary>
            <param name="instance"></param>		
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.ObjectDataProvider.IsAsynchronous">
            <summary>
            If the underlying data service is asynchronous or not
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.ObjectDataProvider.MethodName">
            <summary>
            The method on the Data Service to be called to retreive the data.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.ObjectDataProvider.MethodParameters">
            <summary>
            The parameters passed to the method in MethodName when the call to the service is made.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.ObjectDataProvider.ConstructorParameters">
            <summary>
            Parameters passed to the constructor of the WCF Service client.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.ObjectDataProvider.IgnoreInitialQuery">
            <summary>
            
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.ObjectDataProvider.CreateNewInstance">
            <summary>
            
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.ObjectDataProvider.ObjectInstance">
            <summary>
            
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.ObjectDataProvider.ObjectTypeRef">
            <summary>
            
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.ObjectDataProvider.ObjectType">
            <summary>
            The type of object
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaCubeBuilder">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaCubeBuilder.#ctor(ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaCubeContext)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="cubeContext"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaCubeBuilder.ProcessCube(ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CubeRowset)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="cr"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaCubeBuilder.ProcessDimensions(ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.RowsetCollection)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="rowsetCollection"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaCubeBuilder.ProcessMeasureGroups(ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.RowsetCollection)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="rowsetCollection"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaCubeBuilder.ProcessMeasures(ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.RowsetCollection)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="rowsetCollection"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaCubeBuilder.ProcessHierarchies(ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.RowsetCollection)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="rowsetCollection"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaCubeBuilder.ProcessLevels(ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.RowsetCollection)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="rowsetCollection"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaCubeBuilder.Cube">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaCubeContext.LoadAsync">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaCubeContext.Cancel">
            <summary>
            This member is for internal use only
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaCubeContext.OnLoadCompleted(System.Exception,System.Boolean)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="error"></param>
            <param name="cancelled"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaCubeContext.DiscoverCube">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaCubeContext.m_DiscoverCubesRequestCompleted(System.Object,ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaRequestCompletedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaCubeContext.DiscoverDimensions">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaCubeContext.m_DiscoverDimensionsRequestCompleted(System.Object,ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaRequestCompletedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaCubeContext.DiscoverMeasureGroups">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaCubeContext.m_DiscoverMeasureGroupsRequestCompleted(System.Object,ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaRequestCompletedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaCubeContext.DiscoverMeasures">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaCubeContext.m_DiscoverMeasuresRequestCompleted(System.Object,ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaRequestCompletedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaCubeContext.DiscoverHierarchies">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaCubeContext.m_DiscoverHierarchiesRequestCompleted(System.Object,ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaRequestCompletedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaCubeContext.DiscoverLevels">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaCubeContext.m_DiscoverLevelsRequestCompleted(System.Object,ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaRequestCompletedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.Axis">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.Axis.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.Axis.Expression">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureGroupDimensionRowset">
            <summary>
            This member is for internal use only
            </summary>
            <remarks>
            See http://msdn.microsoft.com/en-ca/library/ms126178.aspx for more info.
            </remarks>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.PropertyContainer">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.PropertyContainer.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.PropertyContainer.#ctor(System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.PropertyContainer.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.PropertyContainer.GetProperty(System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.PropertyContainer.SetProperty(System.String,ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Property)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.PropertyContainer.PropertyExists(System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.PropertyContainer.DeleteProperty(System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.PropertyContainer.AllProperties">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureGroupDimensionRowset.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureGroupDimensionRowset.CatalogName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureGroupDimensionRowset.SchemaName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureGroupDimensionRowset.CubeName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureGroupDimensionRowset.MeasureGroupName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureGroupDimensionRowset.MeasureGroupCardinality">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureGroupDimensionRowset.DimensionUniqueName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureGroupDimensionRowset.DimensionCardinality">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureGroupDimensionRowset.DimensionIsVisible">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureGroupDimensionRowset.DimensionIsFactDimension">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureGroupDimensionRowset.DimensionPath">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureGroupDimensionRowset.DimensionGranularity">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureGroupRowset">
            <summary>
            This member is for internal use only
            </summary>
            <remarks>
            See http://msdn.microsoft.com/en-ca/library/ms126178.aspx for more info.
            </remarks>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureGroupRowset.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureGroupRowset.CatalogName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureGroupRowset.SchemaName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureGroupRowset.CubeName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureGroupRowset.MeasureGroupName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureGroupRowset.MeasureGroupCaption">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureGroupRowset.Description">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureGroupRowset.IsWriteEnabled">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CubeRowset">
            <summary>
            This member is for internal use only
            </summary>
            <remarks>
            See http://msdn.microsoft.com/en-ca/library/ms126271.aspx for more info.
            </remarks>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CubeRowset.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CubeRowset.CatalogName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CubeRowset.SchemeName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CubeRowset.CubeName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CubeRowset.CubeType">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CubeRowset.CubeSource">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CubeRowset.CubeGuid">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CubeRowset.CreatedOn">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CubeRowset.LastSchemaUpdate">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CubeRowset.SchemaUpdatedBy">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CubeRowset.LastDataUpdate">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CubeRowset.DataUpdatedBy">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CubeRowset.Description">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CubeRowset.IsDrillThroughEnabled">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CubeRowset.IsLinkable">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CubeRowset.IsWriteEnabled">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CubeRowset.IsSqlEnabled">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CubeRowset.CubeCaption">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CubeRowset.BaseCubeName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CubeRowset.Annotations">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.AxisCollection">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.AxisCollection.ElementName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.AxisCollection.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.AxisCollection.#ctor(System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.AxisCollection.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Axis">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Axis.ElementName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Axis.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Axis.#ctor(System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Axis.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Axis.Name">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Axis.Sets">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.AxisInfoCollection">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.AxisInfoCollection.ElementName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.AxisInfoCollection.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.AxisInfoCollection.#ctor(System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.AxisInfoCollection.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.AxisInfo">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.AxisInfo.ElementName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.AxisInfo.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.AxisInfo.#ctor(System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.AxisInfo.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.AxisInfo.Name">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.AxisInfo.Hierarchies">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CatalogRowset">
            <summary>
            This member is for internal use only
            </summary>
            <remarks>
            See http://msdn.microsoft.com/en-ca/library/ms126314.aspx for more info.
            </remarks>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CatalogRowset.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CatalogRowset.CatalogName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CatalogRowset.Description">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CatalogRowset.Roles">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CatalogRowset.DateModified">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CellCollection">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CellCollection.ElementName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CellCollection.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CellCollection.#ctor(System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CellCollection.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Cell">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Cell.ElementName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Cell.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Cell.#ctor(System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Cell.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Cell.CellOrdinal">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Cell.Value">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Cell.FormattedValue">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CellInfo">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CellInfo.ElementName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CellInfo.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CellInfo.#ctor(System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CellInfo.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CellInfo.Value">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CellInfo.FormattedValue">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CellInfo.CellOrdinal">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaDiscoverResponse.ParseRowsets(System.Xml.Linq.XElement,ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.RequestType)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xElement"></param>
            <param name="requestType"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaDiscoverResponse.ResolveRowsetType(ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.RequestType)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="requestType"></param>
            <returns></returns>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaDiscoverResponse.ReturnValue">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaMethodParameterCollection.#ctor(System.Collections.Generic.IEnumerable{ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaMethodParameter})">
            <summary>
            This member is for internal use only
            </summary>
            <param name="collection"></param>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapMethodParameter.NameProperty">
            <summary>
            Identifies the Name dependency property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapMethodParameter.Name">
            <summary>
            Gets or sets the Name property.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaRequestCompletedEventArgs">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaRequestCompletedEventArgs.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaRequestCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object,System.Object)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="error"></param>
            <param name="cancelled"></param>
            <param name="userState"></param>
            <param name="result"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaRequestCompletedEventArgs.Result">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaClient.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaClient.#ctor(System.Uri)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="serviceUri"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaClient.#ctor(System.Uri,System.Text.Encoding)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="serviceUri"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaClient.BeginRequest(ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaMethod,System.EventHandler{ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaRequestCompletedEventArgs})">
            <summary>
            This member is for internal use only
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaClient.BeginRequest(ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaMethod,System.EventHandler{ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaRequestCompletedEventArgs},System.Object)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="method"></param>
            <param name="userState"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaClient.ServiceUri">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaClient.Encoding">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaDataProvider.#ctor">
            <summary>
            Initializes a new instance of the SoapDataProvider class.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaDataProvider.BeginQuery">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaDataProvider.method_RequestCompleted(System.Object,ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaRequestCompletedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaDataProvider.method_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaDataProvider.ResolveRemoteAddress(System.Uri)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="remoteAddress"></param>
            <returns></returns>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaDataProvider.ServiceUri">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaDataProvider.Method">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaDataProvider.DiscardUnfinishedRequests">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaDiscoverMethod">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaMethod">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaMethod.Namespace">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaMethod.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaMethod.BeginRequest(ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaClient)">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaMethod.BeginRequest(ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaClient,System.Object)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="userState"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaMethod.OnPropertyChanged(System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaMethod.OnRequestCompleted(ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaRequestCompletedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaMethod.PropertyChanged">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaMethod.RequestCompleted">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaMethod.SoapAction">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaDiscoverMethod.ElementName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaDiscoverMethod.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaDiscoverMethod.BeginRequest(ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaClient,System.Object)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlaClient"></param>
            <param name="userState"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaDiscoverMethod.OnRequestCompleted(System.Object,ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaRequestCompletedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaDiscoverMethod.ToString">
            <summary>
            This member is for internal use only
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaDiscoverMethod.SoapAction">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaDiscoverMethod.RequestType">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaDiscoverMethod.Properties">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaDiscoverMethod.Restrictions">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaExecuteMethod">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaExecuteMethod.ElementName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaExecuteMethod.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaExecuteMethod.Properties_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaExecuteMethod.ToString">
            <summary>
            This member is for internal use only
            </summary>
            <returns></returns>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaExecuteMethod.Command">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaExecuteMethod.SoapAction">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaExecuteMethod.Properties">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaExecuteResponse">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaExecuteResponse.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaExecuteResponse.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaExecuteResponse.ReturnValue">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaQueryBuilder">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaQueryBuilder.ConstructQuery(ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="mdDataSource"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaQueryBuilder.ConstructSelectClause(System.Text.StringBuilder,ComponentArt.Silverlight.DataVisualization.Data.MD.AxisCollection,ComponentArt.Silverlight.DataVisualization.Data.MD.MeasureCollection,System.String,ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaQueryBuilder.HierarchyFilterSet)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="query"></param>
            <param name="mdDataSource"></param>
            <param name="measureDimension"></param>
            <param name="measuresInAxes"></param>
            <param name="hierarchyFilters"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaQueryBuilder.ConstructFromClause(System.Text.StringBuilder,System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="query"></param>
            <param name="mdDataSource"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaQueryBuilder.ConstructWhereClause(System.Text.StringBuilder,System.Collections.Generic.List{System.String},ComponentArt.Silverlight.DataVisualization.Data.MD.MeasureCollection)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="query"></param>
            <param name="filterSets"></param>
            <param name="measures"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaQueryBuilder.CreateHierarchyFilterSet(ComponentArt.Silverlight.DataVisualization.Data.MD.FilterCollection,System.Collections.Generic.HashSet{System.String})">
            <summary>
            This member is for internal use only
            </summary>
            <param name="filters"></param>
            <param name="axisHierarchies"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaQueryBuilder.CreateAxisHierarchySet(ComponentArt.Silverlight.DataVisualization.Data.MD.AxisCollection)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="axes"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaQueryBuilder.ConstructFilterSets(System.Text.StringBuilder,ComponentArt.Silverlight.DataVisualization.Data.MD.FilterCollection,System.Collections.Generic.List{System.String},ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaQueryBuilder.HierarchyFilterSet)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="query"></param>
            <param name="filters"></param>
            <param name="filterSets"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaQueryBuilder.ConstructAxis(System.Text.StringBuilder,System.Int32,ComponentArt.Silverlight.DataVisualization.Data.MD.Axis,ComponentArt.Silverlight.DataVisualization.Data.MD.MeasureCollection,System.String,ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaQueryBuilder.HierarchyFilterSet)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="query"></param>
            <param name="axisOrdinal"></param>
            <param name="axis"></param>
            <param name="measures"></param>
            <param name="measuresUniqueName"></param>
            <param name="hierarchyFilters"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaQueryBuilder.CreateDimensionOrderSet(ComponentArt.Silverlight.DataVisualization.Data.MD.Axis)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaQueryBuilder.ConstructAxis(System.Text.StringBuilder,System.Int32,ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaQueryBuilder.DimensionSet,ComponentArt.Silverlight.DataVisualization.Data.MD.MeasureCollection,System.String,ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaQueryBuilder.HierarchyFilterSet)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="dimensionSet"></param>
            <param name="measures"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaQueryBuilder.CreateDimensionSet(ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNodeCollection,ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNode,ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaQueryBuilder.DimensionOrderSet)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="memberNodes"></param>
            <param name="triggerNode"></param>
            <param name="dimensionOrderSet"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaQueryBuilder.CreateDimensionSet(ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNodeCollection,ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNode,ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaQueryBuilder.DimensionOrderSet,ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaQueryBuilder.DimensionSet,System.Int32,System.Int32)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="memberNodes"></param>
            <param name="triggerNode"></param>
            <param name="dimensionOrderSet"></param>
            <param name="dimensionSet"></param>
            <param name="dimensionOrdinal"></param>
            <param name="hierarchyOrdinal"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaQueryBuilder.GetTriggerNode(ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNodeCollection)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="memberNodes"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaQueryBuilder.GetMeasureDimensionUniqueName(ComponentArt.Silverlight.DataVisualization.Data.MD.Cube)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="mdDataSource"></param>
            <returns></returns>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CrossProduct.ElementName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CrossProduct.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CrossProduct.#ctor(System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CrossProduct.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CrossProduct.Sets">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CubeCollection">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CubeCollection.ElementName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CubeCollection.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CubeCollection.#ctor(System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CubeCollection.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Cube">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Cube.ElementName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Cube.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Cube.#ctor(System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Cube.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Cube.CubeName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Cube.LastDataUpdate">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Cube.LastSchemaUpdate">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.DimensionType">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.DimensionRowset">
            <summary>
            This member is for internal use only
            </summary>
            <remarks>
            See http://msdn.microsoft.com/en-ca/library/ms126180.aspx for more info.
            </remarks>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.DimensionRowset.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.DimensionRowset.CatalogName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.DimensionRowset.SchemaName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.DimensionRowset.CubeName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.DimensionRowset.DimensionName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.DimensionRowset.DimensionUniqueName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.DimensionRowset.DimensionGuid">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.DimensionRowset.DimensionCaption">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.DimensionRowset.DimensionOrdinal">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.DimensionRowset.DimensionType">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.DimensionRowset.DimensionCardinality">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.DimensionRowset.DefaultHierarchy">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.DimensionRowset.Description">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.DimensionRowset.IsVirtual">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.DimensionRowset.IsReadWrite">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.DimensionRowset.DimensionUniqueSettings">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.DimensionRowset.DimensionMasterName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.DimensionRowset.DimensionMasterUniqueName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.DimensionRowset.DimensionIsVisible">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.DimensionRowset.CubeSource">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.DimensionRowset.DimensionVisibility">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyInfo">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyInfo.ElementName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyInfo.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyInfo.#ctor(System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyInfo.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyInfo.Name">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyInfo.MemberUniqueName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyInfo.MemberCaption">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyInfo.LevelUniqueName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyInfo.LevelNumber">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.StructureType">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyOrigin">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.InstanceSelection">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyRowset">
            <summary>
            This member is for internal use only
            </summary>
            <remarks>
            See http://msdn.microsoft.com/en-ca/library/ms126062.aspx for more info.
            </remarks>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyRowset.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyRowset.CatalogName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyRowset.SchemaName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyRowset.CubeName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyRowset.DimensionUniqueName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyRowset.HierarchyName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyRowset.HierarchyUniqueName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyRowset.HierarchyGuid">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyRowset.HierarchyCaption">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyRowset.DimensionType">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyRowset.HierarchyCardinality">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyRowset.DefaultMember">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyRowset.AllMember">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyRowset.Description">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyRowset.Structure">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyRowset.IsVirtual">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyRowset.IsReadWrite">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyRowset.DimensionUniqueSettings">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyRowset.DimensionMasterName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyRowset.DimensionMasterUniqueName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyRowset.DimensionIsVisible">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyRowset.HierarchyOrdinal">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyRowset.DimensionIsShared">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyRowset.HierarchyIsVisible">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyRowset.HierarchyOrigin">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyRowset.HierarchyDisplayFolder">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.HierarchyRowset.InstanceSelection">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.LevelType">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.CustomRollupSettings">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.LevelUniqueSettings">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.LevelOrigin">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.LevelRowset">
            <summary>
            This member is for internal use only
            </summary>
            <remarks>
            See http://msdn.microsoft.com/en-ca/library/ms126038.aspx for more info.
            </remarks>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.LevelRowset.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.LevelRowset.CatalogName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.LevelRowset.SchemaName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.LevelRowset.CubeName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.LevelRowset.DimensionUniqueName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.LevelRowset.HierarchyUniqueName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.LevelRowset.LevelName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.LevelRowset.LevelUniqueName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.LevelRowset.LevelGuid">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.LevelRowset.LevelCaption">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.LevelRowset.LevelNumber">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.LevelRowset.LevelCardinality">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.LevelRowset.LevelType">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.LevelRowset.Description">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.LevelRowset.CustomRollupSettings">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.LevelRowset.LevelUniqueSettings">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.LevelRowset.LevelIsVisible">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.LevelRowset.LevelOrderingProperty">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.LevelRowset.LevelDbType">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.LevelRowset.LevelMasterUniqueName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.LevelRowset.LevelNameSqlColumnName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.LevelRowset.LevelKeySqlColumnName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.LevelRowset.LevelUniqueNameSqlColumnName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.LevelRowset.LevelAttributeHierarchyName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.LevelRowset.LevelKeyCardinality">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.LevelRowset.LevelOrigin">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MdDataSet.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MdDataSet.#ctor(System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MdDataSet.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSetReader.mdDataSet">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSetReader.#ctor(ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MdDataSet)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="mdDataSet"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSetReader.Reset">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSetReader.GetAxisDepth(System.Int32)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="axisNum"></param>
            <returns></returns>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSetReader.DataSet">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource">
            <summary>
            An implementation of <see cref="T:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource"/> that is capable of connecting directly to XMLA-based entry points into OLAP databases (like Microsoft Analysis Services).
            </summary>
            <remarks>
            <para>Create an instance of MdDataSource that will connect to the specified database (<see cref="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.CatalogName"/> property) 
            and Cube (<see cref="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.CubeName"/> property) of the specified service (<see cref="P:ComponentArt.Silverlight.DataVisualization.Data.MD.MdDataSource.Uri"/> property) .</para>
            </remarks>
            <seealso cref="!:ComponentArt.Silverlight.DataVisualization.DataGrids.PivotGrid"/> <seealso cref="!:ComponentArt.Silverlight.DataVisualization.DataGrids.PivotTree"/>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.GetCellData(System.Int32[])">
            <summary>
            This member is for internal use only
            </summary>
            <param name="ordinals"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.GetCatalogsAsync(System.Object)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="userState"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.m_DiscoverCatalogsRequestCompleted(System.Object,ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaRequestCompletedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.GetCubesAsync(System.Object)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="userState"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.m_DiscoverCubesRequestCompleted(System.Object,ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaRequestCompletedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.GetDimensionsAsync(System.Object)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="userState"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.m_DiscoverDimensionsRequestCompleted(System.Object,ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaRequestCompletedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.GetMeasureGroupsAsync(System.Object)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="userState"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.m_DiscoverMeasureGroupsRequestCompleted(System.Object,ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaRequestCompletedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.GetMeasureGroupDimensionsAsync(ComponentArt.Silverlight.DataVisualization.Data.MD.MeasureGroup,System.Object)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="userState"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.m_DiscoverMeasureGroupDimensionsRequestCompleted(System.Object,ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaRequestCompletedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.GetMeasuresAsync(System.Object)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="userState"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.m_DiscoverMeasuresRequestCompleted(System.Object,ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaRequestCompletedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.GetHierarchiesAsync(ComponentArt.Silverlight.DataVisualization.Data.MD.Dimension,System.Object)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="dimension"></param>
            <param name="userState"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.m_DiscoverHierarchiesRequestCompleted(System.Object,ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaRequestCompletedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.GetLevelsAsync(ComponentArt.Silverlight.DataVisualization.Data.MD.Hierarchy,System.Object)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="hierarchy"></param>
            <param name="userState"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.m_DiscoverLevelsRequestCompleted(System.Object,ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaRequestCompletedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.GetMembersAsync(ComponentArt.Silverlight.DataVisualization.Data.MD.Level,System.Object)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="level"></param>
            <param name="userState"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.m_DiscoverMembersRequestCompleted(System.Object,ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaRequestCompletedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.GetChildMembersAsync(ComponentArt.Silverlight.DataVisualization.Data.MD.Member,System.Object)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="member"></param>
            <param name="userState"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.m_DiscoverChildMembersRequestCompleted(System.Object,ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaRequestCompletedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.OnRefresh">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.QueueRefreshCube">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.RefreshCube">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.cubeContext_LoadCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.QueueExecuteQuery">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.ExecuteQuery">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.m_ExecuteQueryRequestCompleted(System.Object,ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Client.XmlaRequestCompletedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.LoadDataSet(ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MdDataSet)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="mdDataSet"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.InvalidateAxes">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.FindUniqueMember(System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="uniqueName"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MdDataSource.UpdateUniqueMembers">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MemberNode">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MemberNode.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MemberNode.#ctor(ComponentArt.Silverlight.DataVisualization.Data.MD.Member)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="member"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MemberNode.#ctor(ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Member)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="member"></param>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MemberNodeCollection">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MemberNodeCollection.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MemberNodeCollection.#ctor(ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNode)">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MemberNodeCollection.#ctor(System.Collections.Generic.IEnumerable{ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNode})">
            <summary>
            This member is for internal use only
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MD.MemberNodeCollection.#ctor(System.Collections.Generic.List{ComponentArt.Silverlight.DataVisualization.Data.MD.MemberNode})">
            <summary>
            This member is for internal use only
            </summary>
            <param name="list"></param>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureAggegatorType">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureRowset">
            <summary>
            This member is for internal use only
            </summary>
            <remarks>
            See http://msdn.microsoft.com/en-ca/library/ms126250.aspx for more info.
            </remarks>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureRowset.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureRowset.CatalogName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureRowset.SchemaName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureRowset.CubeName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureRowset.MeasureName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureRowset.MeasureUniqeName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureRowset.MeasureCaption">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureRowset.MeasureGuid">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureRowset.MeasureAggregator">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureRowset.DataType">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureRowset.NumericPrecision">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureRowset.NumericScale">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureRowset.MeasureUnits">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureRowset.Description">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureRowset.Expression">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureRowset.MeasureIsVisible">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureRowset.LevelsList">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureRowset.MeasureNameOfSqlColumnName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureRowset.MeasureUnqualifiedCaption">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureRowset.MeasureGroupName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureRowset.MeasureDisplayFolder">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MeasureRowset.DefaultFormatString">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberCollection">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberCollection.ElementName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberCollection.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberCollection.#ctor(System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberCollection.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Member">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Member.ElementName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Member.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Member.#ctor(System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Member.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Member.Hierarchy">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Member.MemberUniqueName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Member.MemberCaption">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Member.LevelUniqueName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Member.LevelNumber">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Member.DisplayInfo">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberType">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberScope">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberRowset">
            <summary>
            This member is for internal use only
            </summary>
            <remarks>
            See http://msdn.microsoft.com/en-ca/library/ms126046.aspx for more info.
            </remarks>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberRowset.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberRowset.CatalogName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberRowset.SchemaName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberRowset.CubeName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberRowset.DimensionUniqueName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberRowset.HierarchyUniqueName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberRowset.LevelUniqueName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberRowset.LevelNumber">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberRowset.MemberOrdinal">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberRowset.MemberName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberRowset.MemberUniqueName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberRowset.MemberType">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberRowset.MemberGuid">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberRowset.MemberCaption">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberRowset.ChildrenCardinality">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberRowset.ParentLevel">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberRowset.ParentUniqueName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberRowset.ParentCount">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberRowset.Description">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberRowset.Expression">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberRowset.MemberKey">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberRowset.IsPlaceholderMember">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberRowset.IsDataMember">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.MemberRowset.Scope">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.OlapInfo">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.OlapInfo.ElementName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.OlapInfo.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.OlapInfo.#ctor(System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.OlapInfo.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.OlapInfo.CubeInfo">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.OlapInfo.AxesInfo">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.OlapInfo.CellInfo">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.PropertyList">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Property">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Property.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Property.#ctor(System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Property.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Property.ElementName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Property.Name">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Property.Type">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Property.Default">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Property.Value">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.TupleCollection">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.TupleCollection.ElementName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.TupleCollection.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.TupleCollection.#ctor(System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.TupleCollection.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Tuple">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Tuple.ElementName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Tuple.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Tuple.#ctor(System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Tuple.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Tuple.Members">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Union.ElementName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Union.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Union.#ctor(System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Union.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Olap.Xmla.Union.Sets">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Soap.ISoapMessage">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.ISoapMessage.ToString">
            <summary>
            This member is for internal use only
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.ISoapMessage.BeginRequest(ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapClient)">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.ISoapMessage.BeginRequest(ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapClient,System.Object)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="userState"></param>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Data.Soap.ISoapMessage.RequestCompleted">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Soap.ISoapMessage.SoapAction">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Soap.ISoapMessage.Fault">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapMethodParameterCollection.#ctor(System.Collections.Generic.IEnumerable{ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapMethodParameter})">
            <summary>
            This member is for internal use only
            </summary>
            <param name="collection"></param>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapRequestCompletedEventArgs">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapRequestCompletedEventArgs.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapRequestCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object,System.Object)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="error"></param>
            <param name="cancelled"></param>
            <param name="userState"></param>
            <param name="result"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapRequestCompletedEventArgs.Result">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapClient">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapClient.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapClient.#ctor(System.Uri)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="serviceUri"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapClient.#ctor(System.Uri,System.Text.Encoding)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="serviceUri"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapClient.BeginRequest(ComponentArt.Silverlight.DataVisualization.Data.Soap.ISoapMessage,System.EventHandler{ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapRequestCompletedEventArgs})">
            <summary>
            This member is for internal use only
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapClient.BeginRequest(ComponentArt.Silverlight.DataVisualization.Data.Soap.ISoapMessage,System.EventHandler{ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapRequestCompletedEventArgs},System.Object)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="soapMessage"></param>
            <param name="userState"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapClient.webClient_UploadStringCompleted(System.Object,System.Net.UploadStringCompletedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapClient.ServiceUri">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapClient.Encoding">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapDataProvider.#ctor">
            <summary>
            Initializes a new instance of the SoapDataProvider class.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapDataProvider.BeginQuery">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapDataProvider.message_RequestCompleted(System.Object,ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapRequestCompletedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapDataProvider.ResolveRemoteAddress(System.Uri)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="remoteAddress"></param>
            <returns></returns>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapDataProvider.ServiceUri">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapDataProvider.Message">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapDataProvider.DiscardUnfinishedRequests">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapEnvelope">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapEnvelope.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapEnvelope.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapEnvelope.ToString">
            <summary>
            This member is for internal use only
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapEnvelope.BeginRequest(ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapClient)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapEnvelope.BeginRequest(ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapClient,System.Object)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="client"></param>
            <param name="userState"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapEnvelope.soapClient_RequestCompleted(System.Object,ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapRequestCompletedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapEnvelope.RaiseRequestCompletedEvent(ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapRequestCompletedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapEnvelope.Header">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapEnvelope.Body">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapEnvelope.Fault">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapEnvelope.SoapAction">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapEnvelope.RequestCompleted">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapFaultException">
            <summary>
            Represents a SOAP fault.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapFault">
            <summary>
            Represents an in-memory SOAP fault.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapFault.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapFault.#ctor(System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapFault.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapFault.FaultCode">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapFault.FaultString">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapFault.FaultActor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapFault.Detail">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapMethod">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapMethod.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapMethod.#ctor(System.Xml.Linq.XElement)">
            <summary>
            
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapMethod.ToString">
            <summary>
            This member is for internal use only
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapMethod.ParseResponse(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlResponse"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapMethod.BeginRequest(ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapClient)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapMethod.BeginRequest(ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapClient,System.Object)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="client"></param>
            <param name="userState"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapMethod.soapClient_RequestCompleted(System.Object,ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapRequestCompletedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapMethod.RaiseRequestCompletedEvent(ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapRequestCompletedEventArgs)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapMethod.ServiceNamespace">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapMethod.MethodName">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapMethod.MethodParameters">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapMethod.SoapAction">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapMethod.Fault">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapMethod.RequestCompleted">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapMethodResponse">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapMethodResponse.#ctor">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapMethodResponse.#ctor(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapMethodResponse.ToString">
            <summary>
            This member is for internal use only
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapMethodResponse.ParseResponse(System.Xml.Linq.XElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="xmlResponse"></param>
            <returns></returns>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.Soap.SoapMethodResponse.ReturnValue">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.WcfServiceDataProvider">
            <summary>
            Simplifies and makes possible declerative connection to a WCF service.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.WcfServiceDataProvider.#ctor">
            <summary>
            Initializes a new instance on the WcfServiceDataProvider class.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.WcfServiceDataProvider.BeginQuery">
            <summary>
            
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.WcfServiceDataProvider.AsyncMethodCompleted(ComponentArt.Silverlight.DataVisualization.Data.WcfServiceDataProvider,System.Object,System.Object)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="self"></param>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.WcfServiceDataProvider.CloseInstanceConnection(System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.WcfServiceDataProvider.CreateObjectInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.WcfServiceDataProvider.ResolveRemoteAddress(System.String)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="remoteAddress"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.WcfServiceDataProvider.DisposeOfInstance(System.Object)">
            <summary>
            
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.WcfServiceDataProvider.Dispose">
            <summary>
            Coloses the connection when disposing the object.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.WcfServiceDataProvider.EndPointConfigurationName">
            <summary>
            The Service end point configuration name, as specified in the project config file.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.WcfServiceDataProvider.RemoteAddress">
            <summary>
            The URL where the WCF service can be accessed
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.WcfServiceDataProvider.DiscardUnfinishedRequests">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.DesignTimeData">
            <summary>
            Creates a data class at design time in order to allow deveopers to work with sample data at design time.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.DesignTimeData.GenerateDesignTimeData(System.Object,System.Int32,ComponentArt.Silverlight.DataVisualization.DesignTimeData.DataGenerationAlgorithm)">
            <summary>
            Generates the data.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.DesignTimeData.DataGenerationAlgorithm">
            <summary>
            Type of algorithm used to generate design-time data.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.DispatcherQueue">
            <summary>
            
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.DispatcherQueue.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.DispatcherQueue.QueueMethod(ComponentArt.Silverlight.DataVisualization.Utils.DispatcherQueue.QueuedMethod)">
            <summary>
            
            </summary>
            <param name="queuedMethod"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.DispatcherQueue.InvokeMethod(ComponentArt.Silverlight.DataVisualization.Utils.DispatcherQueue.QueuedMethod)">
            <summary>
            
            </summary>
            <param name="queuedMethod"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.DispatcherQueue.RemoveMethod(ComponentArt.Silverlight.DataVisualization.Utils.DispatcherQueue.QueuedMethod)">
            <summary>
            
            </summary>
            <param name="queuedMethod"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.DispatcherQueue.IsQueued(ComponentArt.Silverlight.DataVisualization.Utils.DispatcherQueue.QueuedMethod)">
            <summary>
            
            </summary>
            <param name="queuedMethod"></param>
            <returns></returns>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.DispatcherQueue.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.DispatcherQueue.QueuedMethod">
            <summary>
            
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.DrillDownLevelCollection">
            <summary>
            Collection of Levels in a DrillDownManager
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.DrillStep">
            <summary>
            Holds information about the direction and target of a drill step.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.DrillDownManager">
            <summary>
            Defines the data and levels to be drilled into and made available to different controls on the page.
            </summary>
            <remarks>
            To learn how to create your first DrillDownManager see <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/DrillDownManager_CreatingYourFirst.htm">this tutorial</a>. <br/>
            To see all tutorials on DrillDownManager, start <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/DrillDownManager_Welcome.htm">here</a>.
            </remarks>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Data.DrillDownManager.ManagedControlsCollection">
            <summary>
            Collection of controls automatically notified and controlled by the manager.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.DrillDownManager.DrillDown(System.Object)">
            <summary>
            Drills down to the next subsequent level
            </summary>
            <param name="target">Target passed to the GetData method of the next level</param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.DrillDownManager.DrillUp">
            <summary>
            Goes up to the the previous level.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.DrillDownManager.DrillUp(System.Int32)">
            <summary>
            Drills back (up) by the specified number of levels.
            </summary>
            <param name="numLevels"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.DrillDownManager.CurrentLevel">
            <summary>
            Current level that the manager is at.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.DrillDownManager.CurrentIndex">
            <summary>
            Numeric index of the current level.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.DrillDownManager.ManagedControls">
            <summary>
            A comma delimited list of Names of IDrillable controls to be controlled by this manager.
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Data.DrillDownManager.DrillDownLevelChanged">
            <summary>
            Fired when the level changes on the manager.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.DrillDownManager.Levels">
            <summary>
            The levels defined in this manager.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.DrillDownLevel">
            <summary>
            Represents one level in the DrillDownManager
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Data.DrillDownLevel.DataProviderProperty">
            <summary>
            Identifies the DataProvider dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Data.DrillDownLevel.ParentManager">
            <summary>
            The parent DrillDownManager of this level
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Data.DrillDownLevel.Target">
            <summary>
            The target used to retrieve the last data set of this level
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Data.DrillDownLevel.CacheData">
            <summary>
            Whether to show the cached level data when the level is being drilled back (up) into.  Default is true.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Data.IDrillable">
            <summary>
            
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.IDrillable.BeginDrillDown(System.Object)">
            <summary>
            Initate drill step.
            </summary>
            <param name="drillTarget">The drilling target.</param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.IDrillable.BeginDrillUp">
            <summary>
            Initiate the step towards the previous position.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.IDrillable.BeginDrillUp(System.Int32)">
            <summary>
            Initiate a multi-step back.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Data.IDrillable.CancelDrill">
            <summary>
            Cancel the drill proces.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.Legend">
            <summary>
            Control used to explain symbols and series in the form of a table.
            </summary>
            <remarks>
            To learn how to create your first Legend see <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/Legend_CreatingYourFirst.htm">this tutorial</a>. <br/>
            To see all tutorials on Legend, start <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/Legend_Welcome.htm">here</a>.
            </remarks>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.Legend.CornerRadiusProperty">
            <summary>
            Identifies the CornerRadius dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.Legend.OrientationProperty">
            <summary>
            Identifies the Orientation dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.Legend.NumberOfColumnsProperty">
            <summary>
            Identifies the NumberOfColumns dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.Legend.NumberOfRowsProperty">
            <summary>
            Identifies the NumberOfRows dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.Legend.ItemDescriptionTemplateProperty">
            <summary>
            Identifies the ItemDescriptionTemplate dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.Legend.LegendItemsProperty">
            <summary>
            Identifies the LegendItems dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.Legend.ItemMarginProperty">
            <summary>
            Identifies the ItemMargin dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.Legend.LegendItemSymbolPositionProperty">
            <summary>
            Identifies the LegendItemSymbolPosition dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.Legend.ItemSymbolCornerRadiusProperty">
            <summary>
            Identifies the ItemSymbolCornerRadius dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.Legend.ItemSymbolBorderBrushProperty">
            <summary>
            Identifies the ItemSymbolBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.Legend.ItemSymbolBorderThicknessProperty">
            <summary>
            Identifies the ItemSymbolBorderThickness dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.Legend.ItemSymbolSizeProperty">
            <summary>
            Identifies the ItemSymbolSize dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.Legend.ItemSymbolMarkerSizeProperty">
            <summary>
            Identifies the ItemSymbolMarkerSize dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.Legend.InterColumnGapProperty">
            <summary>
            Identifies the InterColumnGap dependency property.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.Legend.#ctor">
            <summary>
            Initializes a new instance of the Legend class.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.Legend.OnApplyTemplate">
            <summary>
            Lifecycle method to be called by the framework.  Do not call directly from external code.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.Legend.ThemeProperty">
            <summary>
            ThemeProperty dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.Legend.ThemeVariantProperty">
            <summary>
            ThemeVariantProperty dependency property.
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Common.Legend.MouseEnterLegendItem">
            <summary>
            An event triggered when a mouse pointer enters a legend item.
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Common.Legend.MouseLeaveLegendItem">
            <summary>
            An event triggered when a mouse pointer leaves a legend item.
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Common.Legend.MouseLeftButtonDownOnLegendItem">
            <summary>
            An event triggered when the left mouse button is pressed inside a legend item.
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Common.Legend.MouseLeftButtonUpOnLegendItem">
            <summary>
            An event triggered when the left mouse button is released inside a legend item.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.Legend.CornerRadius">
            <summary>
            The radii of the Legend's corners.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.Legend.Orientation">
            <summary>
                This property determines the direction of placement of consecutive legend items within the legend. Options are Horizontal and Vertical.
                Default value is Vertical.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.Legend.NumberOfColumns">
            <summary>
                Number of columns to place the legend items in. Default is value 1.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.Legend.NumberOfRows">
            <summary>
                Number of rows to place the legend items in. Default is value 1.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.Legend.ItemDescriptionTemplate">
            <summary>
            Gets or sets the custom XAML DataTemplate for the legend item description.
            </summary>
            <remarks>
            Data context for the legend item is a <see cref="!:DefaultLegendItemDataContext"/> object.
            </remarks>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.Legend.LegendItems">
            <summary>
            Collection of legend items.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.Legend.ItemMargin">
            <summary>
            Gets or sets margin for legend items. The margin controls spacing of legend items. 
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.Legend.LegendItemSymbolPosition">
            <summary>
            The relative position of the symbol to the description text.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.Legend.ItemSymbolCornerRadius">
            <summary>
            Radius to use on the corners of LegendItems.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.Legend.ItemSymbolBorderBrush">
            <summary>
            Brush to use on the borders of LegendItem symbols.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.Legend.ItemSymbolBorderThickness">
            <summary>
            Thickness to use on the borders of LegendItem symbols.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.Legend.ItemSymbolSize">
            <summary>
            The Size of the LegendItems within the legend.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.Legend.ItemSymbolMarkerSize">
            <summary>
            The Size of the Marker (if present) within the LegendItem symbol.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.Legend.InterColumnGap">
            <summary>
            Gets or set the amount of space between the columns.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.Legend.Theme">
            <summary>
            Theme property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.Legend.ThemeVariant">
            <summary>
            ThemeVariant property.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.LegendItemOrientation">
            <summary>
            Specifies the orientation of LegendItem objects in a Legend.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.LegendItemOrientation.Horizontal">
            <summary>
            Renders LegendItem objects horizontally.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.LegendItemOrientation.Vertical">
            <summary>
            Renders LegendItem objects vertically.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.LegendItemFillType">
            <summary>
            Specifies how the legend item color is used in the legend item symbol.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.LegendItemFillType.None">
            <summary>
            The legend item symbol contains marker only with no fill.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.LegendItemFillType.Full">
            <summary>
            The full legend item symbol is filled with the legend item color.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.LegendItemFillType.Half">
            <summary>
            Lower half of the legend item symbol is filled with the legend item color.
            Used for area charts with marker.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.LegendItemFillType.CenterLine">
            <summary>
            A horizontal line in the middle of the legend item symbol is filled with the legend item color.
            Used for line charts with marker.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.LegendItemSymbolPosition">
            <summary>
            Specifies the legend item symbol position.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.LegendItemEventArgs">
            <summary>
            EventArgs for the SelectedLegendItem event. Used for MouseEnterLegendItem, MouseLeaveLegendItem, 
            MouseLeftButtonDownOnLegendItem and MouseLeftButtonUpOnLegendItem events of the Legend class.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.LegendItemEventArgs.#ctor(ComponentArt.Silverlight.DataVisualization.Common.LegendItem)">
            <summary>
            Initializes a new instance of the LegendItemEventArgs class with the specified LegendItem.
            </summary>
            <param name="legendItem"></param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.LegendItemEventArgs.LegendItem">
            <summary>
            Legend item related to the event. Use it to acces related DataPoint or Series.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.LegendItemEventArgs.ItemContext">
            <summary>
                The data context of the legend item that corresponds to the event.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.LegendItem">
            <summary>
            A symbol and description of what that symbol (or the color of it) represents.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.LegendItem.#ctor">
            <summary>
            Initializes a new instance of the LegendItem class.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.LegendItem.MarkerProperty">
            <summary>
            Identifies the Marker dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.LegendItem.ItemSymbolColorProperty">
            <summary>
            Identifies the ItemSymbolColor dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.LegendItem.ItemSymbolFillTypeProperty">
            <summary>
            Identifies the ItemSymbolFillType dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.LegendItem.ItemContextProperty">
            <summary>
            Identifies the ItemContext dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.LegendItem.ItemMarkerColorProperty">
            <summary>
            Identifies the ItemMarkerColor dependency property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.LegendItem.ItemSymbolColor">
            <summary>
            The color of the LegendItem symbol (but not the marker) within the legend.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.LegendItem.ItemSymbolFillType">
            <summary>
            The type of fill for legend item, None, Full, Half or Center Line.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.LegendItem.Data">
            <summary>
            The description or context for the LegendItem.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.LegendItem.ItemMarkerFill">
            <summary>
            The color of the Marker (if present) within the LegendItem symbol.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.LegendItem.InternalTag">
            <summary>
            Legend item tag for internal use.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.LegendItemCollection">
            <summary>
                Collection of LegendItem objects.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.LegendItemMarkerConverter">
            <summary>
            Type converter used to convert LegendItem.Marker from string to Marker object. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.LegendItemMarkerConverter.#ctor">
            <summary>
            Initializes a new instance of the PaletteTypeConverter class.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.LegendItemMarkerConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.LegendItemMarkerConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.LicenseLevel">
            <summary>
            Denotes different levels of licensing available from ComponentArt.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.LicenseProvider">
            <summary>
            Provides methods to determine the license entitlement of a control instance.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.LicenseProvider.GetTokens">
            <summary>
            Gets the license tokens (Guids) from the .lic file and registry. 
            </summary>
            <returns>A List of LicenseTokens.</returns>
            <remarks>This method will only go to the file system/registry once, caching the results in the Application state.</remarks>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.LicenseProvider.GetTrialExpirationDate(System.Guid)">
            <summary>
            Gets the expiration DateTime of a current trial license, if there is one for the given GUID.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.LicenseProvider.IsLicensed(System.Guid,ComponentArt.Silverlight.DataVisualization.LicenseLevel)">
            <summary>
            Checks the provided product Guid against the LicenseLevel.
            </summary>
            <param name="guid">The Guid.</param>
            <param name="level">The LicenseLevel(s) to check.</param>
            <returns>True if the license matches one of the provided LicenseLevels.  Otherwise false.</returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.LicenseProvider.GetFileTokens">
            <summary>
            Gets license tokens from the .lic file.
            </summary>
            <returns>A dictionary of LicenseTokens, where the keys are product Guids.</returns>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.LicenseTokens">
            <summary>
            Represents a list of LicenseTokens.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.LicenseTokens.GetLicenseLevel(System.Guid)">
            <summary>
            Gets the license level.
            </summary>
            <param name="guid">The GUID.</param>
            <returns>a LicenseLevel corresponding to this guid.</returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.LicenseTokens.HasTrial(System.Guid)">
            <summary>
            Determines whether the specified GUID has current trial license.
            </summary>
            <param name="guid">The GUID.</param>
            <returns>
            	<c>true</c> if the specified GUID has current trial license; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.LicenseTokens.GetTrialToken(System.Guid)">
            <summary>
            Returns the license token of the trial, if there is a current trial license.
            </summary>
            <param name="guid">The GUID.</param>
            <returns>
            	<c>LicenseToken</c> if the specified GUID has a current trial license; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.Marker">
            <summary>
            Graphical icon used to indicate a point of interest.  Predefined marker templates include: Circle, Bubble, Square, Square3D,
            Diamond, Diamond3D, Plus, Plus3D, Cross, Cross3D, Triangle, TriangleE, TriangleW, TriangleS,
            Arrow, ArrowN, ArrowS, ArrowW, ArrowNW, ArrowNE, ArrowSW, ArrowSE.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.Marker.GetAvailableTemplates">
            <summary>
            Returns a string array with names of all available Markers that can be used in the constructor with a string argument.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.Marker.#ctor">
            <summary>
            Default constructor.  Must set marker template after, if constructed with this constructor.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.Marker.#ctor(System.String)">
            <summary>
            Creates a Marker instance from one of the existing templates.
            </summary>
            <param name="predefinedTemplateName">Available template names include: Circle, Bubble, Square, Square3D,
            Diamond, Diamond3D, Plus, Plus3D, Cross, Cross3D, Triangle, TriangleE, TriangleW, TriangleS,
            Arrow, ArrowN, ArrowS, ArrowW, ArrowNW, ArrowNE, ArrowSW, ArrowSE.</param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.Marker.#ctor(ComponentArt.Silverlight.DataVisualization.Common.Marker)">
            <summary>
            Create new instance by cloning the original.
            </summary>
            <param name="original">The original marker instance. </param>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.Marker.TemplateProperty">
            <summary>
            Identifies the Template dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.Marker.StrokeProperty">
            <summary>
            Identifies the Stroke dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.Marker.StrokeThicknessProperty">
            <summary>
            Identifies the StrokeThickness dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.Marker.FillProperty">
            <summary>
            Identifies the Fill dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.Marker.UseHotSpotProperty">
            <summary>
            Identifies the UseHotSpot dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.Marker.ScaleStrokeThicknessProperty">
            <summary>
            Identifies the ScaleStrokeThickness dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.Marker.InternalStrokeThicknessProperty">
            <summary>
            Identifies the InternalStrokeThickness dependency property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.Marker.Template">
            <summary>
            Template of the marker's visual composition.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.Marker.StrokeThickness">
            <summary>
            The thickness of the outline stroke of the marker.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.Marker.Fill">
            <summary>
            Specifies how to paint the interior of the marker.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.MarkerTemplateNameConverter">
            <summary>
            Type converter which returns a Marker template definition from its name.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.MarkerTemplateNameConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentArt.Silverlight.DataVisualization.Common.MarkerTemplateNameConverter"/> class.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.MarkerTemplateNameConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.MarkerTemplateNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.MarkerTypeConverter">
            <summary>
            Type converter for <see cref="T:ComponentArt.Silverlight.DataVisualization.Common.Marker"/>.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.MarkerTypeConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentArt.Silverlight.DataVisualization.Common.MarkerTypeConverter"/>  class.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.MarkerTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.MarkerTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.ElementNameMismatchException">
            <summary>
            Exception raised ("Element name mismatch.") when invalid XML is read.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ElementNameMismatchException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ElementNameMismatchException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="elementName"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ElementNameMismatchException.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="elementName"></param>
            <param name="message"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ElementNameMismatchException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.UnexpectedElementException">
            <summary>
            Exception raised ("Unexpected element was encountered.") when invalid XML is read.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.UnexpectedElementException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.UnexpectedElementException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="elementName"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.UnexpectedElementException.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="elementName"></param>
            <param name="message"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.UnexpectedElementException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.PaletteConverter">
            <summary>
            A TypeConverter for <see cref="T:ComponentArt.Silverlight.DataVisualization.Palette"/>s.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.PaletteConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.PaletteConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Palette">
            <summary>
            Describes the color scheme used throughout the control.  
            Setting the same palette on multiple controls will create a visually compatible look.
            </summary>
            <remarks>
            To learn more see the <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/CommonConcepts_Theming.htm">Themes and Palettes</a> tutorial. <br/>
            </remarks>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Palette.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Palette.GetPalette(System.String)">
            <summary>
            Returns a Palette object by the given name.
            </summary>
            <param name="paletteName">String name of the Palette</param>
            <returns>The Palette object</returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Palette.GetPaletteFromResource(System.Uri)">
            <summary>
            Returns a Palette object from a given URI resource.
            </summary>
            <param name="paletteName">URI of the Palette</param>
            <returns>The Palette object</returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Palette.GetPaletteNames">
            <summary>
            Returns an array of all available pallete names.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Palette.GetColors(System.String,System.String,System.Int32)">
            <summary>
            Returns numColors colors from paletteCategory intended for controlCategory. 
            If a problem occurs, defaults are returned, but the sanity of the return value can always be relied on.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Palette.PaletteName">
            <summary>
            String name of this palette.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Palette.ChartingDataPoints1">
            <summary>
            Color definition for a charting series with 1 data point.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Palette.ChartingDataPoints2">
            <summary>
            Color definition for a charting series with 2 data points.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Palette.ChartingDataPoints3">
            <summary>
            Color definition for a charting series with 3 data points.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Palette.ChartingDataPoints4">
            <summary>
            Color definition for a charting series with 4 data points.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Palette.ChartingDataPoints5">
            <summary>
            Color definition for a charting series with 5 data points.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Palette.ChartingDataPoints6">
            <summary>
            Color definition for a charting series with 6 data points.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Palette.ChartingDataPoints7">
            <summary>
            Color definition for a charting series with 7 data points.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Palette.ChartingDataPoints8">
            <summary>
            Color definition for a charting series with 8 data points.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Palette.ChartingDataPoints9">
            <summary>
            Color definition for a charting series with 9 data points.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Palette.ChartingDataPoints10">
            <summary>
            Color definition for a charting series with 10 data points.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Palette.ChartingDataPoints11">
            <summary>
            Color definition for a charting series with 11 data points.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Palette.ChartingDataPoints12">
            <summary>
            Color definition for a charting series with 12 data points.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Palette.GaugesStops">
            <summary>
            Definition of theme compatible color-stops, used by Gauges.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Palette.MappingStops">
            <summary>
            Definition of theme compatible color-stops used by Maps.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Palette.GridViewAccent">
            <summary>
            Definition of theme compatible color-stops, used For <see cref="!:GridView"/> accent.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Palette.ChromeAccent">
            <summary>
            Definition of theme compatible color-stops, used accenting the chrome of the controls.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.ResizableScrollBar">
            <summary>
            A <see cref="T:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar"/> that allows for resizing of the viewable range.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar">
            <summary>
            Control used to linearly navigate through content, with a sliding thumb whose position corresponds to a value.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar"/> class. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.RaiseScrollEvent(System.Windows.Controls.Primitives.ScrollEventType)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.OrientationProperty">
            <summary>
            Identifies the Orientation dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.ViewportSizeProperty">
            <summary>
            Identifies the ViewportSize dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.SmallChangeVisibilityProperty">
            <summary>
            Identifies the SmallChangeVisibility dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.ContentProperty">
            <summary>
            Identifies the Content dependency property.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.OnApplyTemplate">
            <summary>
            Lifecycle method to be called by the framework.  Do not call directly from external code.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.SmallIncrement">
            <summary>
            
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.SmallDecrement">
            <summary>
            
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.LargeIncrement">
            <summary>
            
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.LargeDecrement">
            <summary>
            
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.OnOrientationChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.OnViewportSizeChanged(System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.GetTrackLength">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.GetThumbMin">
            <summary>
            Get the minimum width/length of the thumb of the ScrollBar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.GetVerticalTrackLength">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.GetHorizontalTrackLength">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.UpdateThumbSize(System.Double)">
            <summary>
            
            </summary>
            <param name="trackLength"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.GetViewportLength(System.Double)">
            <summary>
            
            </summary>
            <param name="trackLength"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.GetViewportLength(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="trackLength"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.UpdateTrackLayout(System.Double)">
            <summary>
            
            </summary>
            <param name="trackLength"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.ScrollBar_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.ScrollBar_SizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.Template_SizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.Thumb_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.Thumb_DragStarted(System.Object,System.Windows.Controls.Primitives.DragStartedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.Thumb_DragCompleted(System.Object,System.Windows.Controls.Primitives.DragCompletedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.Thumb_DragDelta(System.Object,System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.SmallIncrease_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.SmallDecrease_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.LargeIncrease_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.LargeDecrease_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.ThemeProperty">
            <summary>
            ThemeProperty dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.ThemeVariantProperty">
            <summary>
            ThemeVariantProperty dependency property.
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.Scroll">
            <summary>
            Raised when the ScrollBar thumb is moved.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.Orientation">
            <summary>
            Direction in which the ScrollBar slides.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.ViewportSize">
            <summary>
            The width or height of the range of values (viewport) shown.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.SmallChangeVisibility">
            <summary>
            Whether to show the increase/decrease value buttons at the ends of the scrollbar.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.Content">
            <summary>
            Container for optional UIElements in the scrollbar, rendered behind the thumb.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.Theme">
            <summary>
            Theme property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.ScrollBar.ThemeVariant">
            <summary>
            ThemeVariant property.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ResizableScrollBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentArt.Silverlight.DataVisualization.Common.ResizableScrollBar"/> class. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ResizableScrollBar.RaiseViewportSizeChangedEvent(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.ResizableScrollBar.ResizeHandleVisibilityProperty">
            <summary>
            Identifies the ResizeHandleVisibility dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.ResizableScrollBar.MinimumViewportSizeProperty">
            <summary>
            Identifies the MinimumViewportSize dependency property.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.ResizableScrollBar.MaximumViewportSizeProperty">
            <summary>
            Identifies the MaximumViewportSize dependency property.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ResizableScrollBar.OnApplyTemplate">
            <summary>
            Lifecycle method to be called by the framework.  Do not call directly from external code.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ResizableScrollBar.GetResizeMin">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ResizableScrollBar.GetThumbMin">
            <summary>
            Get the minimum width/length of the thumb of the ResizableScrollBar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ResizableScrollBar.UpdateThumbSize(System.Double)">
            <summary>
            
            </summary>
            <param name="trackLength"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ResizableScrollBar.ThumbIncrease_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ResizableScrollBar.ThumbIncrease_DragStarted(System.Object,System.Windows.Controls.Primitives.DragStartedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ResizableScrollBar.ThumbIncrease_DragCompleted(System.Object,System.Windows.Controls.Primitives.DragCompletedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ResizableScrollBar.ThumbIncrease_DragDelta(System.Object,System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ResizableScrollBar.ThumbDecrease_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ResizableScrollBar.ThumbDecrease_DragStarted(System.Object,System.Windows.Controls.Primitives.DragStartedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ResizableScrollBar.ThumbDecrease_DragCompleted(System.Object,System.Windows.Controls.Primitives.DragCompletedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.ResizableScrollBar.ThumbDecrease_DragDelta(System.Object,System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Common.ResizableScrollBar.ViewportSizeChanged">
            <summary>
            Raised when the ResizableScrollbar is either resized or scrolled, changing the range of values (viewport) shown.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.ResizableScrollBar.ResizeHandleVisibility">
            <summary>
            Whether to show resize indicators.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.ResizableScrollBar.MinimumViewportSize">
            <summary>
            Gets or sets the MinimumViewportSize property.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.ResizableScrollBar.MaximumViewportSize">
            <summary>
            Gets or sets the MaximumViewportSize property.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.Spinner">
            <summary>
            Spinner class.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.Spinner.OnApplyTemplate">
            <summary>
            Lifecycle method to be called by the framework.  Do not call directly from external code.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.Spinner.Start">
            <summary>
            Starts the spinning.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.Spinner.Pause">
            <summary>
            Pauses the spinning.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.Spinner.Stop">
            <summary>
            Stops the spinning.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.Spinner.SourceProperty">
            <summary>
            Image to spin.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.Spinner.RotationLoopDurationProperty">
            <summary>Duration in milliseconds for the animation to turn a full loop.</summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.Spinner.CollapseDelay">
            <summary>
            Number of milliseconds to keep the spinner visible after a TreeViewSpinner.Stop() call. 
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.Spinner.IsRunning">
            <summary>
            Check if the control is currently running.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.Spinner.Source">
            <summary>
            Image to spin.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.Spinner.RotationLoopDuration">
            <summary>Duration in milliseconds for the animation to turn a full loop.</summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.TimeLevel">
            <summary>
            Describes a TimeContext as related to a zoom level for usage with the TimeNavigator control
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.TimeLevel.GetNodes(ComponentArt.Silverlight.DataVisualization.Common.TimeContext,System.DateTime,System.DateTime)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>     
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.TimeLevel.FirstMonthOfYear(System.Globalization.Calendar,System.DateTime)">
            <summary>
            Returns the First Month of the DateTime Year in the context of the Calendar
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.TimeLevel.FirstDayOfMonth(System.Globalization.Calendar,System.DateTime)">
            <summary>
            Returns the First Day of the DateTime Month in the context of the Calendar
            </summary>
            <param name="calendar"></param>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.TimeLevel.FirstDayOfYear(System.Globalization.Calendar,System.DateTime)">
            <summary>
            Returns the First Day of the DateTime Year in the context of the Calendar
            </summary>
            <param name="calendar"></param>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.TimeLevel.DefaultLevelMap">
            <summary>
            A fully populated TimeLevel with all possible units available
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.DecadeLevel">
            <summary>
            A TimeLevel describing Decades
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.DecadeLevel.GetNodes(ComponentArt.Silverlight.DataVisualization.Common.TimeContext,System.DateTime,System.DateTime)">
            <summary>
             This member is for internal use only
            </summary>
            <param name="context"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.YearLevel">
            <summary>
            A TimeLevel describing Years
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.YearLevel.GetNodes(ComponentArt.Silverlight.DataVisualization.Common.TimeContext,System.DateTime,System.DateTime)">
            <summary>
             This member is for internal use only
            </summary>
            <param name="context"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.QuarterLevel">
            <summary>
            A TimeLevel describing Quarters
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.QuarterLevel.GetNodes(ComponentArt.Silverlight.DataVisualization.Common.TimeContext,System.DateTime,System.DateTime)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.QuarterLevel.GetMonthsInQuarters(System.Int32)">
            <summary>
            Converts the number of Months in a Year to the number of Months in each Quarter of that year
            </summary>
            <param name="year"></param>
            <param name="startMonth"></param>
            <returns></returns>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.MonthLevel">
            <summary>
            A TimeLevel describing Months
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.MonthLevel.GetNodes(ComponentArt.Silverlight.DataVisualization.Common.TimeContext,System.DateTime,System.DateTime)">
            <summary>
             This member is for internal use only
            </summary>
            <param name="context"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.WeekLevel">
            <summary>
            A TimeLevel describing Weeks
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.WeekLevel.GetNodes(ComponentArt.Silverlight.DataVisualization.Common.TimeContext,System.DateTime,System.DateTime)">
            <summary>
             This member is for internal use only
            </summary>
            <param name="context"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.WeekLevel.GetWeekOfYear(ComponentArt.Silverlight.DataVisualization.Common.TimeContext,System.DateTime,System.DateTime)">
            <summary>
            Returns the number of a Week within its Year
            </summary>
            <param name="context"></param>
            <param name="yearStart"></param>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.WeekLevel.GetWeekOfMonth(ComponentArt.Silverlight.DataVisualization.Common.TimeContext,System.DateTime,System.DateTime)">
            <summary>
            Returns the number of a Week within its Month
            </summary>
            <param name="context"></param>
            <param name="monthStart"></param>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.DayLevel">
            <summary>
            A TimeLevel describing Days
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.DayLevel.GetNodes(ComponentArt.Silverlight.DataVisualization.Common.TimeContext,System.DateTime,System.DateTime)">
            <summary>
             This member is for internal use only
            </summary>
            <param name="context"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.HourLevel">
            <summary>
            A TimeLevel describing Hours
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.HourLevel.GetNodes(ComponentArt.Silverlight.DataVisualization.Common.TimeContext,System.DateTime,System.DateTime)">
            <summary>
             This member is for internal use only
            </summary>
            <param name="context"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.MinuteLevel">
            <summary>
            A TimeLevel describing Minutes
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.MinuteLevel.GetNodes(ComponentArt.Silverlight.DataVisualization.Common.TimeContext,System.DateTime,System.DateTime)">
            <summary>
             This member is for internal use only
            </summary>
            <param name="context"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.SecondLevel">
            <summary>
            A TimeLevel describing Seconds
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.SecondLevel.GetNodes(ComponentArt.Silverlight.DataVisualization.Common.TimeContext,System.DateTime,System.DateTime)">
            <summary>
             This member is for internal use only
            </summary>
            <param name="context"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.MillisecondLevel">
            <summary>
            A TimeLevel describing Milliseconds
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.MillisecondLevel.GetNodes(ComponentArt.Silverlight.DataVisualization.Common.TimeContext,System.DateTime,System.DateTime)">
            <summary>
             This member is for internal use only
            </summary>
            <param name="context"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.MicrosecondLevel">
            <summary>
            A TimeLevel describing MicroSeconds
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.MicrosecondLevel.GetNodes(ComponentArt.Silverlight.DataVisualization.Common.TimeContext,System.DateTime,System.DateTime)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="context"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.WeekNumberInterval">
            <summary>
            Options for numbering Weeks, either Week of the Year, or Week of the Month
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.WeekNumberInterval.Year">
            <summary>
            
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.WeekNumberInterval.Month">
            <summary>
            
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.FirstWeekOfYear">
            <summary>
            Describes the what constitutes the first Week of the Year
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.FirstWeekOfYear.FirstDayOfYear">
            <summary>
            
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.FirstWeekOfYear.FirstFourDays">
            <summary>
            
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.FirstWeekOfYear.FirstFullWeek">
            <summary>
            
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.FirstWeekOfYear.FirstDayOfWeekOfYear">
            <summary>
            
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.FiscalOffset">
            <summary>
            An offset used to describe Fiscal calendars which do not begin January 1st 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.FiscalOffset.#ctor">
            <summary>
            Initializes a new instance of the FiscalOffset class.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.FiscalOffset.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the FiscalOffset class with the specified months.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.FiscalOffset.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the FiscalOffset class with the specified months and days.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.FiscalOffset.op_Addition(System.DateTime,ComponentArt.Silverlight.DataVisualization.Common.FiscalOffset)">
            <summary>
            Adds a specified fiscal offset to a specified date and time, yielding a new date and time.
            </summary>
            <param name="d">The date and time object to add.</param>
            <param name="f">The fiscal offset object to add.</param>
            <returns>An object that is the sum of the values of d and t.</returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.FiscalOffset.Apply(System.DateTime)">
            <summary>
            Accepts a DateTime and returns a DateTime in the context of the current CultureInfo Calendar 
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.FiscalOffset.Apply(System.DateTime,System.Globalization.Calendar)">
            <summary>
            Accepts a DateTime and Calendar and returns a DateTime in the context of the Calendar 
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.FiscalOffset.Revert(System.DateTime)">
            <summary>
            Accepts a DateTime and returns a DateTime converted from the context of the current CultureInfo Calendar 
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.FiscalOffset.Revert(System.DateTime,System.Globalization.Calendar)">
            <summary>
            Accepts a DateTime and a Calendar and returns a DateTime converted from the context of the Calendar 
            </summary>
            <param name="d"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.FiscalOffset.Days">
            <summary>
            Gets the day of the month represented by this instance.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.FiscalOffset.Months">
            <summary>
             Gets the month component of the date represented by this instance.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.TimeContext">
            <summary>
            Describes a Calendar that can be affected by CultureInfo, Calendar, FiscalOffset and a number of other 
            parameters that can alter the DateTime range of the TimeContext
            </summary>
            <remarks>TimeContext determines the levels visible when a user zooms in or out of the <see cref="!:ComponentArt.Silverlight.DataVisualization.TimeNavigator.TimeNavigator"/>. 
            Possible values are "Decade, Year, Quarter, Month, Week, Day, Hour, Minute, Second". 
            These levels can be toggled in any configuration and are set as a comma delimited string.</remarks>
            <seealso cref="!:ComponentArt.Silverlight.DataVisualization.TimeNavigator.TimeNavigator"/>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.TimeContext.Culture">
            <summary>
            Sets the CultureInfo which should be applied to this TimeContext
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.TimeContext.Calendar">
            <summary>
            Sets the Calendar which should be applied to this TimeContext
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.TimeContext.FiscalOffset">
            <summary>
            Sets the FiscalOffset which should be applied to this TimeContext
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.TimeContext.FirstDayOfWeek">
            <summary>
            Sets the day of the week which should be considered the first day of the week
            for this TimeContext
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.TimeContext.FirstDayOfWeekOfYear">
            <summary>
            Describes what should be considered the first day of the year when determining the first week, 
            FirstWeekOfYear should be set to FirstDayOfWeekOfYear
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.TimeContext.FirstWeekOfYear">
            <summary>
            Specifies what should be considered the first week of the year
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.TimeContext.WeekNumber">
            <summary>
            Whether the number associated with any current week should be related to the number of the week within the year or within the month
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.TimeContext.Levels">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.TimeContext.LevelMap">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="E:ComponentArt.Silverlight.DataVisualization.Common.TimeContext.PropertyChanged">
            <summary>
            Notifies when a property of this TimeContext instance has changed.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.CultureConverter">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.CultureConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.CultureConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.CultureConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.CultureConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.InstanceConverter">
            <summary>
            Type converter which can be used to attempt to instantiate any class given its full name.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.InstanceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.InstanceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.InstanceConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.InstanceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.FiscalOffsetConverter">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.FiscalOffsetConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.FiscalOffsetConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.FiscalOffsetConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.FiscalOffsetConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.TimeUnit">
            <summary>
            The amount of time per item.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.TimeUnit.Root">
            <summary>
            Full range of specified time.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.TimeUnit.Decade">
            <summary>
            Ten years per item.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.TimeUnit.Year">
            <summary>
            One year per item.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.TimeUnit.Quarter">
            <summary>
            Three months per item.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.TimeUnit.Month">
            <summary>
            One month per item. 
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.TimeUnit.Week">
            <summary>
            One week per item.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.TimeUnit.Day">
            <summary>
            One day per item.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.TimeUnit.Hour">
            <summary>
            One hour per item.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.TimeUnit.Minute">
            <summary>
            One minute per item.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.TimeUnit.Second">
            <summary>
            One second per item.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.TimeUnit.Millisecond">
            <summary>
            One thousandth (1/1000) of a second per item.
            </summary>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Common.TimeUnit.Microsecond">
            <summary>
            One millionth (1/1000000) of a second per item.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.TimeUnitTypeConverter">
            <summary>
            This member is for internal use only
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.TimeUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.TimeUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.TimeUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.TimeUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Common.TimeNode">
            <summary>
            Describes a TimeUnit within a time based hierarchy
            </summary>  
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.TimeNode.#ctor(ComponentArt.Silverlight.DataVisualization.Common.TimeContext,ComponentArt.Silverlight.DataVisualization.Common.TimeUnit,System.DateTime,System.DateTime)">
            <summary>
            The constructor for the TimeNode class, requires TimeContext, TimeUnit, DateTime for the TimeUnit's start and DateTime for the TimeUnit's end
            </summary>                
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.TimeNode.GetNodes(ComponentArt.Silverlight.DataVisualization.Common.TimeUnit)">
            <summary>
            Gets an array of TimeNodes for the specified TimeUnit between this TimeNode's Start and End.
            </summary>
            <param name="timeUnit"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.TimeNode.GetNodes(ComponentArt.Silverlight.DataVisualization.Common.TimeUnit,System.DateTime,System.DateTime)">
            <summary>
            Gets an array of TimeNodes for the specified TimeUnit between start and end.
            </summary>
            <param name="timeUnit"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.TimeNode.GetParentNode">
            <summary>
            Returns the Parent TimeNode of a TimeNode within a timeline hierachy
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.TimeNode.GetChildNodes">
            <summary>
            Returns the Child Nodes TimeNodes of within a timeline hierachy
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.TimeNode.GetChildNodes(System.DateTime,System.DateTime)">
            <summary>
            Returns the Child Nodes within a start and end DateTime of a timeline hierachy
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.TimeNode.GetFirstChildNode">
            <summary>
            Returns the First Child Node within a timeline hierachy
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.TimeNode.GetLastChildNode">
            <summary>
            Returns the Last Child Node within a timeline hierachy
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.TimeNode.GetSiblingNode(System.DateTime)">
            <summary>
            Returns a Sibling Node of a start and end DateTime within a timeline hierachy
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.TimeNode.GetSiblingNodes(System.DateTime,System.DateTime)">
            <summary>
            Returns the Siblings of a start and end DateTime within a timeline hierachy
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.TimeNode.GetPreviousSibling">
            <summary>
            Returns the Previous Siblings within a timeline hierachy
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.TimeNode.GetNextSibling">
            <summary>
            Returns the Next Siblings within a timeline hierachy
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.TimeNode.GetParentUnit">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.TimeNode.GetChildUnit">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.TimeNode.GetTimeUnits">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.TimeNode.GetTimeLevel">
            <summary>
            Returns the TimeLevel
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Common.TimeNode.GetTimeLevel(ComponentArt.Silverlight.DataVisualization.Common.TimeUnit)">
            <summary>
            Returns a TimeUnit's TimeLevel
            </summary>
            <param name="timeUnit"></param>
            <returns></returns>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.TimeNode.Context">
            <summary>
            Gets the ruleset that this TimeNode is governed by.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.TimeNode.TimeUnit">
            <summary>
            Gets the TimeUnit that this TimeNode represents.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.TimeNode.Start">
            <summary>
            Gets a DateTime value that represents the start of this TimeNode (inclusive).
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.TimeNode.End">
            <summary>
            Gets a DateTime value that represents the end of this TimeNode (exclusive).
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.TimeNode.YearOrdinal">
            <summary>
            The member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.TimeNode.Ordinal">
            <summary>
            The member is for internal use only
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.TimeNode.Length">
            <summary>
            Gets a TimeSpan that represents the length of this TimeNode.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.TimeNode.HasParent">
            <summary>
            Gets whether this TimeNode has a parent node.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Common.TimeNode.HasChildren">
            <summary>
            Gets whether this TimeNode has child nodes.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.BaseCollectionTypeConverter`1">
            <summary>
            Base type converter between an ObservableCollection and its string representation. For use with dependency properties.
            </summary>
            <typeparam name="T">Type of members of the collection.</typeparam>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.BaseCollectionTypeConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.BaseCollectionTypeConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.BaseCollectionTypeConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.BaseCollectionTypeConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.BaseCollectionTypeConverter`1.StringToValueConvertor(System.String)">
            <summary>
            Override with a string-to-value conversion function.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.BaseCollectionTypeConverter`1.ValueToStringConvertor(`0)">
            <summary>
            Override with value-to-string conversion function. Default implementation does a simple n.ToString() conversion.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.DoubleCollectionTypeConverter">
            <summary>
            Type convertor between an ObservableCollection of doubles and its string representation in XAML.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.ObjectCollectionTypeConverter">
            <summary>
            Type convertor between an ObservableCollection of objects and its string representation in XAML. Very simple, will convert everything to collection of strings.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.DateTimeExtensions">
            <summary>
            DateTime extenstions for common date values
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.DateTimeTypeConverter">
            <summary>
            Type converter for DateTime values. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.DateTimeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.DateTimeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.DateTimeTypeConverter.GetExpressionEvaluationContext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.DateTimeTypeConverter.TryParse(System.String,System.Globalization.CultureInfo,System.DateTime@)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="culture"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.DateTimeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.DateTimeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ComponentArt.Silverlight.DataVisualization.Utils.ConvertToThickness" -->
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.ConvertToThickness.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Implementation of standard ValueConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.ConvertToThickness.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Implementation of standard ValueConverter method.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.ConvertToCornerRadius">
            <summary>
            Converts a String to a <see cref="T:System.Windows.CornerRadius"/> object.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.ConvertToCornerRadius.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Implementation of standard ValueConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.ConvertToCornerRadius.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Implementation of standard ValueConverter method.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.ColorToSolidColorBrush">
            <summary>
            Converts a given <see cref="T:System.Windows.Media.Color"/> to a <see cref="T:System.Windows.Media.SolidColorBrush"/> object
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.ColorToSolidColorBrush.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Implementation of standard ValueConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.ColorToSolidColorBrush.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Implementation of standard ValueConverter method.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.StringToColor">
            <summary>
            Converts a String to a <see cref="T:System.Windows.Media.Color"/> object.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.StringToColor.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Implementation of standard ValueConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.StringToColor.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Implementation of standard ValueConverter method.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.KMGTValueConverter">
            <summary>
            Numeric value converter replacing trailing groups of zeroes with appropriate suffix. For example, 15000 can be formatted 
            as 15K, 1500000 is 1.5M etc. 
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.KMGTValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert numeric value to a formatted string replacing trailing groups of zeroes with appropriate suffix.
            </summary>
            <param name="value">The value to be formatted. The type has to be convertible to decimal.</param>
            <param name="targetType">Target type has to be string.</param>
            <param name="parameter">Converting parameter - ignored.</param>
            <param name="culture">Culture used if the <see cref="P:ComponentArt.Silverlight.DataVisualization.Utils.KMGTValueConverter.Culture"/> property is not set.</param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.KMGTValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Implementation of standard ValueConverter method. No need for implementation.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.KMGTValueConverter.PositivePattern">
            <summary>
            Pattern for positive values. Character 'n' is replaced by the formatted number, '-' is replaced by the negative sign
            character in the actual culture, '$' is replaced by the currency simbol. Other characters in the pattern aren't changed. 
            Default value is "n".
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.KMGTValueConverter.NegativePattern">
            <summary>
            Pattern for negative values. Character 'n' is replaced by the formatted number, '-' is replaced by the negative sign
            character in the actual culture, '$' is replaced by the currency simbol. Other characters in the pattern aren't changed. 
            Default value is "-n".
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.KMGTValueConverter.Culture">
            <summary>
            Culture/language name (for example "en-CA" for Canada). If not specified, the culture used by the current thread is used.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.KMGTValueConverter.Suffix">
            <summary>
            The suffix string containing suffixes that are used for groups of trailing zeroes. Default is "KMGTP".
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.ConvertToVisibility">
            <summary>
            Converts a String or a boolean to a <see cref="T:System.Windows.Visibility"/> enumeration.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.ConvertToVisibility.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Implementation of standard ValueConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.ConvertToVisibility.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Implementation of standard ValueConverter method.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.ConvertToFontFamily">
            <summary>
            Converts a String to a representing <see cref="T:System.Windows.Media.FontFamily"/> object.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.ConvertToFontFamily.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Implementation of standard ValueConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.ConvertToFontFamily.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Implementation of standard ValueConverter method.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.DetachFromVisualTree">
            <summary>
            Convert method detaches the provided <see cref="T:System.Windows.FrameworkElement"/> from the visual tree.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.DetachFromVisualTree.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Implementation of standard ValueConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.DetachFromVisualTree.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.DictionaryToObject">
             <summary>
             DictionaryToObject:
             <remarks>
             This is a Dictionary extension method which creates an object with a typeid made from a hash of the 2nd parameter passed in.
             The Fields of the object equate to the keys of the dictionary and the values of the Fields are the values of the keys in the
             Dictionary.
             
             Object caching is unproven at this point but it works fast enough.
             </remarks>
             <example>
                    DataTemplate _newContent = (DataTemplate)FindResource(CustomTemplate, false);
            
                    if (_newContent != null)
                    {
                        Object ds;
                        ds = Attributes.ToObject(CustomTemplate); // Attributes is the same property bag as XmlBindingHelper refers to.
                        ContentControl control = new ContentControl()
                        {
                            ContentTemplate = _newContent,
                            Content = ds,
                        };
                        _rectMiddleStack.Children.Add(control);
                        control.ApplyTemplate();
                    }
                    else
                    {
                        throw new ArgumentNullException("Can't find resource named " + CustomTemplate);
                    }
                    
             // This is just the resource finder that MenuItem uses to locate nodes. If delete is set then this is removed from Resources,
             // this is desired for things that can't be in two places at once, unlike DataTemplates.
             public object FindResource(string name, bool delete)
             {
                 if (_menuControl.Resources.Contains(name)) // first look in control resources
                 {
                     object _tmp = _menuControl.Resources[name];
                     if (delete)
                     {
                         _menuControl.Resources.Remove(name);
                     }
                     return _tmp;
                 }
                 else if (Application.Current.Resources.Contains(name)) // then check app resources
                 {
                     object _tmp = Application.Current.Resources[name];
                     if (delete)
                     {
                         Application.Current.Resources.Remove(name);
                     }
                     return _tmp;
                 }
                 else // finally check the page RootVisual.
                 {
                     FrameworkElement root = Application.Current.RootVisual as FrameworkElement;
                     return root.FindName(name);
                 }
             }
             </example>
             </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.DictionaryToObject.ToObject(System.Collections.IDictionary,System.String)">
            <summary>
            DONE: cache object types based on template name.
            TODO: verify that the above is working, I am not sure even though the type id is identical.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Licensing">
            <summary>
            Controls licensing of ComponentArt controls.  For internal use only, do not call directly from code.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Theming">
            <summary>
            Theming class.  Themes are set through each control's Theme property, there is no need to invoke the class directly.
            </summary>
            <remarks>
            To learn more see the <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/CommonConcepts_Theming.htm">Themes and Palettes</a> tutorial.
            </remarks>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Theming.ApplyTheme(System.Windows.FrameworkElement,System.String,ComponentArt.Silverlight.DataVisualization.ThemeVariant)">
            <summary>
            Applies this theme to the given control.  Called by controls internally, do not call directly.
            </summary>
            <remarks>
            To learn more see the <a href="mk:@MSITStore:ComponentArt.Silverlight.DataVisualization.chm::/CommonConcepts_Theming.htm">Themes and Palettes</a> tutorial.
            </remarks>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Theming.GetThemeNames">
            <summary>
            Returns an array of all available Themes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Theming.UpdateTheme(ComponentArt.Silverlight.DataVisualization.IThemable)">
            <summary>
            Updates the control visuals with the theme elements.  For internal use only.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Visual.FindStoryboard(System.Windows.FrameworkElement,System.String,System.String)">
            <summary>
            Find a VSM state storyboard by name.
            </summary>
            <param name="groupName">VisualStateGroup</param>
            <param name="stateName">State</param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Visual.FindTransition(System.Windows.FrameworkElement,System.String,System.String,System.String)">
            <summary>
            Find a VSM transition. From and To are optional.
            </summary>
            <param name="parent"></param>
            <param name="groupName"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Visual.FindDoubleKeyFrame(System.Windows.Media.Animation.Storyboard,System.String)">
            <summary>
            Find a DoubleKeyFrame by name in a storyboard.
            </summary>
            <param name="keyframeName"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Visual.FindAnimationByName(System.Windows.Media.Animation.Storyboard,System.String)">
            <summary>
            Find the animation object in a given Storyboard.
            </summary>
            <param name="parent"></param>
            <param name="animationName"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Visual.AttachToVisualTree(System.Windows.Controls.Primitives.Popup)">
            <summary>
            Attach a Popup to the visual tree.
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Visual.DetachFromVisualTree(System.Windows.FrameworkElement)">
            <summary>
            
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Visual.PositionRelativeTo(System.Windows.UIElement,System.Windows.UIElement)">
            <summary>
            Return (x,y) coordinates of the child relative to another control on a page.
            </summary>
            <param name="grandparent"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Visual.RootVisual(System.Windows.UIElement)">
            <summary>
            Return the top-most element in the visual tree of the given element. For regular elements, it's always Application.Current.RootVisual; for elements in Popups, it's the Popup itself.
            </summary>
            <param name="el"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Visual.PointRelativeTo(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns point relative to another reference point.
            </summary>
            <param name="point"></param>
            <param name="referencePoint"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Visual.PointRelativeTo(System.Windows.Point,System.Windows.UIElement)">
            <summary>
            Returns point relative to a UIElement. Point should contain absolute coordinates.
            </summary>
            <param name="point"></param>
            <param name="referenceElement"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Visual.WalkVisualTreeAncestry(System.Windows.UIElement)">
            <summary>
            Enumerates Visual Tree ancestors of the element, starting with the immediate parent and ending with Application.Current.RootVisual
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Visual.WalkVisualTreeBreadthFirst(System.Windows.UIElement)">
            <summary>
            Enumerate children elements in the visual tree for a given control.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Visual.SelectiveWalkVisualTreeBreadthFirst(System.Windows.UIElement,System.Func{System.Windows.UIElement,System.Boolean})">
            <summary>
            Enumerate children elements in the visual tree for a given control, skipping parts of the tree under elements where skipCondition evaluates to true.
            </summary>
            <param name="skipCondition">Lambda expression containing the skip condition. Example: n => (int)n.GetValue(Grid.Row)==1 will skip all elements (and their children) who have Grid.Row set to 1.</param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Visual.ParentOfType``1(System.Windows.UIElement)">
            <summary>
            Search the ancestry for a parent of a given type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Visual.ParentOfType``1(System.Windows.UIElement,System.Windows.UIElement)">
            <summary>
            Search the ancestry for a parent of a given type, within a subtree
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Visual.FindElementByName(System.Windows.UIElement,System.String)">
            <summary>
            Find child element by name.
            </summary>
            <param name="parent">Parent element.</param>
            <param name="name">Name to search for.</param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Visual.GetColorFromHexString(System.String)">
            <summary>
            Changes a Hex string (ie: "FF4E4E4E" ) to a Color object.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Visual.GetDistance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the distance between two points (in pixels)
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Visual.GetGeometry(System.Windows.Controls.Border)">
            <summary>
            Returns geometry representation of the border. Useful for clipping.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Visual.FindElementsInHostCoordinates``1(System.Windows.Point,System.Windows.UIElement)">
            <summary>
            Enumerates objects located within a specified point of an object's coordinate space.
            </summary>
            <typeparam name="T">Type to filter the results by.</typeparam>
            <param name="intersectingPoint">The point to use as the determination point. It should be relative to the RootVisual.</param>
            <param name="subtree">The object to search within.</param>
            <returns>An enumerable set of UIElement objects that are determined to be located in the visual tree composition at the specified point and within the specified subtee.</returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Visual.FindElementsInHostCoordinates``1(System.Windows.Rect,System.Windows.UIElement)">
            <summary>
            Enumerates objects located within a specified Rect of an object's coordinate space.
            </summary>
            <typeparam name="T">Type to filter the results by.</typeparam>
            <param name="intersectingRect">The Rect to use as the determination area. Coordinates should be relative to the RootVisual.</param>
            <param name="subtree">The object to search within.</param>
            <returns>An enumerable set of UIElement objects that are determined to be located in the visual tree composition at the specified point and within the specified subtee.</returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Visual.CancelDrag(System.Windows.Controls.Primitives.Thumb)">
            <summary>
            Cancels a rouge drag operation on a Thumb control.  Call this from Thumb.MouseEnter.
            </summary>
            <param name="thumb">The Thumb element to cancel a drag operation on.</param>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.DesignMode.Active">
            <summary>
            Checks if we're in Blend or another non-browser environment
            <example>if (DesignMode.Active) { do_stuff; }</example>
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Tools.duplicate(System.Windows.Media.DoubleCollection)">
            <summary>
            Assigning the same DoubleCollection to multiple properties throws a nasty exception. Use this method for cloning.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Tools.UriSource(System.Windows.Media.ImageSource)">
            <summary>
            Retrieve Uri from the ImageSource object.
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Tools.GetRootVisual">
            <summary>
            Retrieve the root UIElement appropriate to SILVERLIGHT or WPF.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Tools.GetEffectiveIconSource(System.Windows.Media.ImageSource,System.Uri)">
            <summary>
            Combine IconSource and BaseIconSource URLs
            </summary>
            <param name="baseIconSource"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Tools.Clone``1(``0,System.Boolean)">
            <summary>
            Clone an object, either deep or shallow.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Tools.KeyFromValue``2(System.Collections.Generic.Dictionary{``0,``1},``1,System.Int32)">
            <summary>
            Return the dictionary key corresponding to the value, skipping first n matches.
            </summary>
            <typeparam name="T">Key type</typeparam>
            <typeparam name="T1">Value type</typeparam>
            <param name="value">Value to search for</param>
            <param name="skip">Skip first n entries</param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Tools.KeyFromValue``2(System.Collections.Generic.Dictionary{``0,``1},``1)">
            <summary>
            Return the dictionary key corresponding to the first matching value.
            </summary>
            <typeparam name="T">Key type</typeparam>
            <typeparam name="T1">Value type</typeparam>
            <param name="value">Value to search for</param>
            <returns></returns>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Tools.WalkHierarchyDepthFirst``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Enumerate objects in the tree hierarchy, depth first.
            </summary>
            <typeparam name="T">Type of the objects in the tree.</typeparam>
            <param name="root">Root collection.</param>
            <param name="collection">Lambda expression pointing to the collection of children objects, e.g. (n => n.Items)</param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Tools.WalkHierarchyBreadthFirst``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Enumerate objects in the tree hierarchy, breadth first.
            </summary>
            <typeparam name="T">Type of the objects in the tree.</typeparam>
            <param name="root">Root collection.</param>
            <param name="collection">Lambda expression pointing to the collection of children objects, e.g. (n => n.Items)</param>
        </member>
        <member name="F:ComponentArt.Silverlight.DataVisualization.Utils.Tools.TagProperty">
            <summary>
            Contains an arbitrary object value that can be used to store custom information about this element. This is an attached dependency property.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Tools.SetTag(System.Windows.DependencyObject,System.Object)">
            <summary>
            Set value of the Tag attached property. Setting it to null will remove the property.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Tools.GetTag(System.Windows.DependencyObject)">
            <summary>
            Get value of the Tag attached property.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Tools.DebugPrint(System.String,System.Object)">
            <summary>
            WPF Debug.Print.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Tools.DebugPrint(System.String,System.Object,System.Object)">
            <summary>
            WPF Debug.Print.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Tools.DebugPrint(System.String,System.Object,System.Object,System.Object)">
            <summary>
            WPF Debug.Print.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Tools.DebugPrint(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            WPF Debug.Print.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.Tools.DebugPrint(System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            WPF Debug.Print.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.EventAttacher">
            <summary>
            Indicates how to attach an event to the given target.
            </summary>
            <param name="sender">the object that fired the event</param>
            <param name="target">the object to which an event must be attached</param>
            <param name="method">the method to invoke in the event handler</param>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.EventSupport">
            <summary>
            Support for attaching to an event based on the name of a method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.EventSupport.AttachEvent(System.Windows.DependencyObject,System.String,System.Type[],ComponentArt.Silverlight.DataVisualization.Utils.EventAttacher)">
            <summary>
            Attaches an event to the first Parent of obj (which must be a 
            FrameworkElement) which declares a public method with the name 
            "handler" and arguments of types "types".
            
            When that method is found, attacher is invoked with:
            - sender is "obj"
            - target is the Parent that declares the method
            - method is the method of Parent
            </summary>
            <param name="obj">the object to which to attach an event</param>
            <param name="handler">the name of the method to be found in some Parent of obj</param>
            <param name="attacher">indicates how to attach an event to the target</param>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.EventSupport.InvokeHandler(System.Windows.DependencyObject,System.String,System.Type[],ComponentArt.Silverlight.DataVisualization.Utils.EventAttacher)">
            <summary>
            Finds the event in the first Parent of obj (which must be a 
            FrameworkElement) which declares a public method with the name 
            "handler" and arguments of types "types".
            
            When that method is found, attacher is invoked with:
            - sender is "obj"
            - target is the Parent that declares the method
            - method is the method of Parent
            </summary>
            <param name="obj">the object to which to attach an event</param>
            <param name="handler">the name of the method to be found in some Parent of obj</param>
            <param name="attacher">indicates how to attach an event to the target</param>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.MissingTemplateException">
             <summary>
             Exception to be thrown if the end developer removed a necessary control from a template.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.InvalidTemplateException">
             <summary>
             Exception to be thrown if the end developer is using a malformed template.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.DemoDataValue">
            <summary>
            Data class used primarily for Demos and Design Time data creation.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.DemoDataValue.Date">
            <summary>
            A DateTime data value.  Can take format of "mm/dd/yyyy".
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.DemoDataValue.Label">
            <summary>
            A String data value.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.DemoDataValue.X">
            <summary>
            A String data value.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.DemoDataValue.Y">
            <summary>
            A double data value.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.DemoDataValue.Y2">
            <summary>
            A double data value.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.DemoDataValue.Z">
            <summary>
            A double data value.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.DemoDataValue.From">
            <summary>
            A double data value.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.DemoDataValue.To">
            <summary>
            A double data value.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.DemoDataValue.Open">
            <summary>
            A double data value.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.DemoDataValue.Close">
            <summary>
            A double data value.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.DemoDataValue.High">
            <summary>
            A double data value.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.DemoDataValue.Low">
            <summary>
            A double data value.
            </summary>
        </member>
        <member name="P:ComponentArt.Silverlight.DataVisualization.Utils.DemoDataValue.Volume">
            <summary>
            An int data value.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.TestDTimeConverter">
            <summary>
            Type converter for DateTime objects.  For internal use only.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.TestDTimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.TestDTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="M:ComponentArt.Silverlight.DataVisualization.Utils.TestDTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Implementation of standard TypeConverter method.
            </summary>
        </member>
        <member name="T:ComponentArt.Silverlight.DataVisualization.Utils.DemoDataValues">
            <summary>
            A collection fo <see cref="T:ComponentArt.Silverlight.DataVisualization.Utils.DemoDataValue"/> objects.
            </summary>
        </member>
    </members>
</doc>
